{
  "contractName": "IColonyNetwork",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "approveExitRecovery",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "exitRecoveryMode",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numRecoveryRoles",
      "outputs": [
        {
          "name": "numRoles",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_slot",
          "type": "uint256"
        },
        {
          "name": "_value",
          "type": "bytes32"
        }
      ],
      "name": "setStorageSlotRecovery",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isInRecoveryMode",
      "outputs": [
        {
          "name": "inRecoveryMode",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_slot",
          "type": "uint256"
        }
      ],
      "name": "checkNotAdditionalProtectedVariable",
      "outputs": [],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeRecoveryRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "setRecoveryRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "enterRecoveryMode",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "ColonyNetworkInitialised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "tokenLocking",
          "type": "address"
        }
      ],
      "name": "TokenLockingAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "miningCycleResolver",
          "type": "address"
        }
      ],
      "name": "MiningCycleResolverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "feeInverse",
          "type": "uint256"
        }
      ],
      "name": "NetworkFeeInverseSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "ColonyVersionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "metaColony",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "rootSkillId",
          "type": "uint256"
        }
      ],
      "name": "MetaColonyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "colonyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "colonyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ColonyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "skillId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "parentSkillId",
          "type": "uint256"
        }
      ],
      "name": "SkillAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "auction",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "inactiveReputationMiningCycle",
          "type": "address"
        }
      ],
      "name": "ReputationMiningInitialised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "nNodes",
          "type": "uint256"
        }
      ],
      "name": "ReputationMiningCycleComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "newNNodes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "stakers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "ReputationRootHashSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "label",
          "type": "bytes32"
        }
      ],
      "name": "UserLabelRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "colony",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "label",
          "type": "bytes32"
        }
      ],
      "name": "ColonyLabelRegistered",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_reputationMiningCycle",
          "type": "address"
        },
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "int256"
        },
        {
          "name": "_skillId",
          "type": "uint256"
        },
        {
          "name": "_colony",
          "type": "address"
        },
        {
          "name": "_nUpdates",
          "type": "uint128"
        },
        {
          "name": "_nPreviousUpdates",
          "type": "uint128"
        }
      ],
      "name": "setReplacementReputationUpdateLogEntry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_reputationMiningCycle",
          "type": "address"
        },
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getReplacementReputationUpdateLogEntry",
      "outputs": [
        {
          "components": [
            {
              "name": "user",
              "type": "address"
            },
            {
              "name": "amount",
              "type": "int256"
            },
            {
              "name": "skillId",
              "type": "uint256"
            },
            {
              "name": "colony",
              "type": "address"
            },
            {
              "name": "nUpdates",
              "type": "uint128"
            },
            {
              "name": "nPreviousUpdates",
              "type": "uint128"
            }
          ],
          "name": "reputationLogEntry",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_reputationMiningCycle",
          "type": "address"
        }
      ],
      "name": "getReplacementReputationUpdateLogsExist",
      "outputs": [
        {
          "name": "exists",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getMetaColony",
      "outputs": [
        {
          "name": "colonyAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getColonyCount",
      "outputs": [
        {
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_colony",
          "type": "address"
        }
      ],
      "name": "isColony",
      "outputs": [
        {
          "name": "addressIsColony",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_parentSkillId",
          "type": "uint256"
        }
      ],
      "name": "addSkill",
      "outputs": [
        {
          "name": "skillId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "getSkill",
      "outputs": [
        {
          "components": [
            {
              "name": "nParents",
              "type": "uint128"
            },
            {
              "name": "nChildren",
              "type": "uint128"
            },
            {
              "name": "parents",
              "type": "uint256[]"
            },
            {
              "name": "children",
              "type": "uint256[]"
            },
            {
              "name": "globalSkill",
              "type": "bool"
            },
            {
              "name": "deprecated",
              "type": "bool"
            }
          ],
          "name": "skill",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "deprecateSkill",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "int256"
        },
        {
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "appendReputationUpdateLog",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSkillCount",
      "outputs": [
        {
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getReputationMiningSkillId",
      "outputs": [
        {
          "name": "skillId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenLockingAddress",
          "type": "address"
        }
      ],
      "name": "setTokenLocking",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTokenLocking",
      "outputs": [
        {
          "name": "lockingAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "createMetaColony",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "createColony",
      "outputs": [
        {
          "name": "colonyAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_version",
          "type": "uint256"
        },
        {
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "addColonyVersion",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_resolver",
          "type": "address"
        },
        {
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "initialise",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getColony",
      "outputs": [
        {
          "name": "colonyAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentColonyVersion",
      "outputs": [
        {
          "name": "version",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_skillId",
          "type": "uint256"
        },
        {
          "name": "_parentSkillIndex",
          "type": "uint256"
        }
      ],
      "name": "getParentSkillId",
      "outputs": [
        {
          "name": "skillId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_skillId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        }
      ],
      "name": "getChildSkillId",
      "outputs": [
        {
          "name": "skillId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "getReputationMiningCycle",
      "outputs": [
        {
          "name": "repMiningCycleAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timeStaked",
          "type": "uint256"
        },
        {
          "name": "_submissonIndex",
          "type": "uint256"
        }
      ],
      "name": "calculateMinerWeight",
      "outputs": [
        {
          "name": "minerWeight",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "getColonyVersionResolver",
      "outputs": [
        {
          "name": "resolverAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newHash",
          "type": "bytes32"
        },
        {
          "name": "newNNodes",
          "type": "uint256"
        },
        {
          "name": "stakers",
          "type": "address[]"
        },
        {
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "setReputationRootHash",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "startNextCycle",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialiseReputationMining",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getReputationRootHash",
      "outputs": [
        {
          "name": "rootHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getReputationRootHashNNodes",
      "outputs": [
        {
          "name": "nNodes",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "startTokenAuction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_ens",
          "type": "address"
        },
        {
          "name": "_rootNode",
          "type": "bytes32"
        }
      ],
      "name": "setupRegistrar",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "username",
          "type": "string"
        },
        {
          "name": "orbitdb",
          "type": "string"
        }
      ],
      "name": "registerUserLabel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "colonyName",
          "type": "string"
        },
        {
          "name": "orbitdb",
          "type": "string"
        }
      ],
      "name": "registerColonyLabel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "orbitdb",
          "type": "string"
        }
      ],
      "name": "updateColonyOrbitDB",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "orbitdb",
          "type": "string"
        }
      ],
      "name": "updateUserOrbitDB",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "getProfileDBAddress",
      "outputs": [
        {
          "name": "orbitDB",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "lookupRegisteredENSDomain",
      "outputs": [
        {
          "name": "domain",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getENSRegistrar",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "miningResolverAddress",
          "type": "address"
        }
      ],
      "name": "setMiningResolver",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getMiningResolver",
      "outputs": [
        {
          "name": "miningResolverAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getFeeInverse",
      "outputs": [
        {
          "name": "_feeInverse",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_feeInverse",
          "type": "uint256"
        }
      ],
      "name": "setFeeInverse",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSkillCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createColony\",\"outputs\":[{\"name\":\"colonyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_skillId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"}],\"name\":\"getChildSkillId\",\"outputs\":[{\"name\":\"skillId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_parentSkillId\",\"type\":\"uint256\"}],\"name\":\"addSkill\",\"outputs\":[{\"name\":\"skillId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReputationMiningSkillId\",\"outputs\":[{\"name\":\"skillId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_reputationMiningCycle\",\"type\":\"address\"}],\"name\":\"getReplacementReputationUpdateLogsExist\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reputationMiningCycle\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"int256\"},{\"name\":\"_skillId\",\"type\":\"uint256\"},{\"name\":\"_colony\",\"type\":\"address\"},{\"name\":\"_nUpdates\",\"type\":\"uint128\"},{\"name\":\"_nPreviousUpdates\",\"type\":\"uint128\"}],\"name\":\"setReplacementReputationUpdateLogEntry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orbitdb\",\"type\":\"string\"}],\"name\":\"updateColonyOrbitDB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveExitRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeInverse\",\"type\":\"uint256\"}],\"name\":\"setFeeInverse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitRecoveryMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"initialise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startNextCycle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numRecoveryRoles\",\"outputs\":[{\"name\":\"numRoles\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setStorageSlotRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"startTokenAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"int256\"},{\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"appendReputationUpdateLog\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_rootNode\",\"type\":\"bytes32\"}],\"name\":\"setupRegistrar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lookupRegisteredENSDomain\",\"outputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getColony\",\"outputs\":[{\"name\":\"colonyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getColonyCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMetaColony\",\"outputs\":[{\"name\":\"colonyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningResolver\",\"outputs\":[{\"name\":\"miningResolverAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReputationRootHashNNodes\",\"outputs\":[{\"name\":\"nNodes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInRecoveryMode\",\"outputs\":[{\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"checkNotAdditionalProtectedVariable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timeStaked\",\"type\":\"uint256\"},{\"name\":\"_submissonIndex\",\"type\":\"uint256\"}],\"name\":\"calculateMinerWeight\",\"outputs\":[{\"name\":\"minerWeight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"getColonyVersionResolver\",\"outputs\":[{\"name\":\"resolverAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenLockingAddress\",\"type\":\"address\"}],\"name\":\"setTokenLocking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReputationRootHash\",\"outputs\":[{\"name\":\"rootHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeRecoveryRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createMetaColony\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getENSRegistrar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenLocking\",\"outputs\":[{\"name\":\"lockingAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"orbitdb\",\"type\":\"string\"}],\"name\":\"registerUserLabel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHash\",\"type\":\"bytes32\"},{\"name\":\"newNNodes\",\"type\":\"uint256\"},{\"name\":\"stakers\",\"type\":\"address[]\"},{\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setReputationRootHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"deprecateSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentColonyVersion\",\"outputs\":[{\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"getSkill\",\"outputs\":[{\"components\":[{\"name\":\"nParents\",\"type\":\"uint128\"},{\"name\":\"nChildren\",\"type\":\"uint128\"},{\"name\":\"parents\",\"type\":\"uint256[]\"},{\"name\":\"children\",\"type\":\"uint256[]\"},{\"name\":\"globalSkill\",\"type\":\"bool\"},{\"name\":\"deprecated\",\"type\":\"bool\"}],\"name\":\"skill\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"getProfileDBAddress\",\"outputs\":[{\"name\":\"orbitDB\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setRecoveryRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_skillId\",\"type\":\"uint256\"},{\"name\":\"_parentSkillIndex\",\"type\":\"uint256\"}],\"name\":\"getParentSkillId\",\"outputs\":[{\"name\":\"skillId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_colony\",\"type\":\"address\"}],\"name\":\"isColony\",\"outputs\":[{\"name\":\"addressIsColony\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"miningResolverAddress\",\"type\":\"address\"}],\"name\":\"setMiningResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"colonyName\",\"type\":\"string\"},{\"name\":\"orbitdb\",\"type\":\"string\"}],\"name\":\"registerColonyLabel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enterRecoveryMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_reputationMiningCycle\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getReplacementReputationUpdateLogEntry\",\"outputs\":[{\"components\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"skillId\",\"type\":\"uint256\"},{\"name\":\"colony\",\"type\":\"address\"},{\"name\":\"nUpdates\",\"type\":\"uint128\"},{\"name\":\"nPreviousUpdates\",\"type\":\"uint128\"}],\"name\":\"reputationLogEntry\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orbitdb\",\"type\":\"string\"}],\"name\":\"updateUserOrbitDB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialiseReputationMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeInverse\",\"outputs\":[{\"name\":\"_feeInverse\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"addColonyVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"getReputationMiningCycle\",\"outputs\":[{\"name\":\"repMiningCycleAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"ColonyNetworkInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenLocking\",\"type\":\"address\"}],\"name\":\"TokenLockingAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"miningCycleResolver\",\"type\":\"address\"}],\"name\":\"MiningCycleResolverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeInverse\",\"type\":\"uint256\"}],\"name\":\"NetworkFeeInverseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"ColonyVersionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"metaColony\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rootSkillId\",\"type\":\"uint256\"}],\"name\":\"MetaColonyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"colonyId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"colonyAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ColonyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"skillId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentSkillId\",\"type\":\"uint256\"}],\"name\":\"SkillAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auction\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"inactiveReputationMiningCycle\",\"type\":\"address\"}],\"name\":\"ReputationMiningInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"nNodes\",\"type\":\"uint256\"}],\"name\":\"ReputationMiningCycleComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newNNodes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakers\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ReputationRootHashSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"UserLabelRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"colony\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"ColonyLabelRegistered\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addColonyVersion(uint256,address)\":{\"params\":{\"_resolver\":\"Address of the `Resolver` contract which will be used with the underlying `EtherRouter` contract\",\"_version\":\"The new Colony contract version\"}},\"addSkill(uint256)\":{\"details\":\"Errors if the parent skill does not exist or if this is called by an unauthorised sender.\",\"params\":{\"_parentSkillId\":\"Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent.\"},\"return\":\"skillId Id of the added skill\"},\"addr(bytes32)\":{\"params\":{\"node\":\"The namehash of the ENS address being requested\"},\"return\":\"address The address the supplied node resolves to\"},\"appendReputationUpdateLog(address,int256,uint256)\":{\"details\":\"Errors if it is called by anyone but a colony or if skill with id `_skillId` does not exist or.\",\"params\":{\"_amount\":\"The amount of reputation change for the update, this can be a negative as well as a positive value\",\"_skillId\":\"The skill for the reputation update\",\"_user\":\"The address of the user for the reputation update\"}},\"calculateMinerWeight(uint256,uint256)\":{\"params\":{\"_submissonIndex\":\"Index of reputation hash submission (between 0 and 11)\",\"_timeStaked\":\"Amount of time (in seconds) that the miner has staked their CLNY\"},\"return\":\"minerWeight The weight of miner reward\"},\"checkNotAdditionalProtectedVariable(uint256)\":{\"details\":\"No return value, but should throw if protected.This is public, but is only expected to be called from ContractRecovery; no need toexpose this to any users.\",\"params\":{\"_slot\":\"The storage slot number to check.\"}},\"createColony(address)\":{\"params\":{\"_tokenAddress\":\"Address of an ERC20 token to serve as the colony token. Additionally token can optionally support `mint` as defined in `ERC20Extended`. Support for `mint` is mandatory only for the Meta Colony Token.\"},\"return\":\"colonyAddress Address of the newly created colony\"},\"createMetaColony(address)\":{\"params\":{\"_tokenAddress\":\"Address of the CLNY token\"}},\"deprecateSkill(uint256)\":{\"params\":{\"_skillId\":\"Id of the skill\"}},\"getChildSkillId(uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"Index of the `skill.children` array to get\",\"_skillId\":\"Id of the skill\"},\"return\":\"skillId Skill Id of the requested child skill\"},\"getColony(uint256)\":{\"params\":{\"_id\":\"Id of the colony to get\"},\"return\":\"colonyAddress The colony address, if no colony was found, returns 0x0\"},\"getColonyCount()\":{\"return\":\"count The colony count\"},\"getColonyVersionResolver(uint256)\":{\"params\":{\"_version\":\"The Colony contract version\"},\"return\":\"resolverAddress Address of the `Resolver` contract\"},\"getCurrentColonyVersion()\":{\"return\":\"version The current / latest Colony contract version\"},\"getENSRegistrar()\":{\"return\":\"address The address the ENSRegistrar resolves to\"},\"getFeeInverse()\":{\"return\":\"_feeInverse The inverse of the network fee\"},\"getMetaColony()\":{\"return\":\"colonyAddress The Meta colony address, if no colony was found, returns 0x0\"},\"getMiningResolver()\":{\"return\":\"miningResolverAddress The address of the mining cycle resolver currently used by new instances\"},\"getParentSkillId(uint256,uint256)\":{\"params\":{\"_parentSkillIndex\":\"Index of the `skill.parents` array to get Note that not all parent skill ids are stored here. See `Skill.parents` member for definition on which parents are stored\",\"_skillId\":\"Id of the skill\"},\"return\":\"skillId Skill Id of the requested parent skill\"},\"getProfileDBAddress(bytes32)\":{\"params\":{\"node\":\"The Namehash of the account being queried.\"},\"return\":\"orbitDB A string containing the address of the orbit database\"},\"getReplacementReputationUpdateLogEntry(address,uint256)\":{\"params\":{\"_id\":\"The log entry number we wish to see if there is a replacement for\",\"_reputationMiningCycle\":\"The address of the reputation mining cycle we are asking about\"},\"return\":\"reputationLogEntry ReputationLogEntry instance with the details of the log entry (if it exists)\"},\"getReplacementReputationUpdateLogsExist(address)\":{\"params\":{\"_reputationMiningCycle\":\"The reputation mining cycle address we want to know if any entries have been replaced in.\"},\"return\":\"exists Boolean indicating whether there is a replacement log\"},\"getReputationMiningCycle(bool)\":{\"params\":{\"_active\":\"Whether the user wants the active or inactive reputation mining cycle\"},\"return\":\"repMiningCycleAddress address of active or inactive ReputationMiningCycle\"},\"getReputationMiningSkillId()\":{\"return\":\"skillId The `skillId` of the reputation mining skill.\"},\"getReputationRootHash()\":{\"return\":\"rootHash The current Reputation Root Hash\"},\"getReputationRootHashNNodes()\":{\"details\":\"I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.\",\"return\":\"nNodes uint256 The number of nodes in the state tree\"},\"getSkill(uint256)\":{\"params\":{\"_skillId\":\"Id of the skill\"},\"return\":\"skill The Skill struct\"},\"getSkillCount()\":{\"return\":\"count The skill count\"},\"getTokenLocking()\":{\"return\":\"lockingAddress Token locking contract address\"},\"initialise(address,uint256)\":{\"details\":\"Only allowed to be run once, by the Network owner before any Colony versions are added.\",\"params\":{\"_resolver\":\"Address of the resolver for Colony contract\",\"_version\":\"Version of the Colony contract the resolver represents\"}},\"isColony(address)\":{\"params\":{\"_colony\":\"Address of the colony\"},\"return\":\"addressIsColony true if specified address is a colony, otherwise false\"},\"isInRecoveryMode()\":{\"return\":\"inRecoveryMode Return true if recovery mode is active, false otherwise\"},\"lookupRegisteredENSDomain(address)\":{\"params\":{\"addr\":\"The address we wish to find the corresponding ENS domain for (if any)\"},\"return\":\"domain A string containing the colony-based ENS name corresponding to addr\"},\"numRecoveryRoles()\":{\"return\":\"numRoles Number of users with the recovery role.\"},\"registerColonyLabel(string,string)\":{\"params\":{\"colonyName\":\"The label to register.\",\"orbitdb\":\"The path of the orbitDB database associated with the colony name\"}},\"registerUserLabel(string,string)\":{\"params\":{\"orbitdb\":\"The path of the orbitDB database associated with the user profile\",\"username\":\"The label to register\"}},\"removeRecoveryRole(address)\":{\"params\":{\"_user\":\"User we want to remove recovery role from\"}},\"setFeeInverse(uint256)\":{\"params\":{\"_feeInverse\":\"The inverse of the network fee to set\"}},\"setMiningResolver(address)\":{\"params\":{\"miningResolverAddress\":\"The address of the Resolver contract with the functions correctly wired.\"}},\"setRecoveryRole(address)\":{\"params\":{\"_user\":\"User we want to give a recovery role to\"}},\"setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)\":{\"details\":\"Note that strictly, `_nUpdates` and `_nPreviousUpdates` don't need to be set - they're only used during dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing the client, we have decided to include them for now.\",\"params\":{\"_amount\":\"The amount of reputation being earned / lost\",\"_colony\":\"The address of the colony being updated\",\"_id\":\"The number of the log entry in the reputation mining cycle in question.\",\"_nPreviousUpdates\":\"The number of updates in the log before this entry\",\"_nUpdates\":\"The number of updates the log entry corresponds to\",\"_reputationMiningCycle\":\"The address of the reputation mining cycle that the log was in.\",\"_skillId\":\"The id of the origin skill for the reputation update\",\"_user\":\"The address of the user earning / losing the reputation\"}},\"setReputationRootHash(bytes32,uint256,address[],uint256)\":{\"params\":{\"newHash\":\"The reputation root hash\",\"newNNodes\":\"The updated nodes count value\",\"reward\":\"Amount of CLNY to be distributed as reward to miners\",\"stakers\":\"Array of users who submitted or backed the hash, being accepted here as the new reputation root hash\"}},\"setStorageSlotRecovery(uint256,bytes32)\":{\"details\":\"certain critical variables are protected from editing in this function\",\"params\":{\"_slot\":\"Uint address of storage slot to be updated\",\"_value\":\"word of data to be set\"}},\"setTokenLocking(address)\":{\"params\":{\"_tokenLockingAddress\":\"Address of the locking contract\"}},\"setupRegistrar(address,bytes32)\":{\"params\":{\"_ens\":\"Address of ENS registrar\",\"_rootNode\":\"Namehash of the root node for the domain\"}},\"startTokenAuction(address)\":{\"params\":{\"_token\":\"Address of the token held by the network to be auctioned\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"return\":\"`true` if the contract implements `interfaceID`\"},\"updateColonyOrbitDB(string)\":{\"params\":{\"orbitdb\":\"The path of the orbitDB database to be associated with the colony\"}},\"updateUserOrbitDB(string)\":{\"params\":{\"orbitdb\":\"The path of the orbitDB database to be associated with the user\"}}},\"title\":\"Colony Network interface\"},\"userdoc\":{\"methods\":{\"addColonyVersion(uint256,address)\":{\"notice\":\"Adds a new Colony contract version and the address of associated `_resolver` contract. Secured function to authorised members. Allowed to be called by the Meta Colony only.\"},\"addSkill(uint256)\":{\"notice\":\"Adds a new skill to the global or local skills tree, under skill `_parentSkillId`. Only the Meta Colony is allowed to add a global skill, called via `IColony.addGlobalSkill`. Any colony is allowed to add a local skill and which is associated with a new domain via `IColony.addDomain`.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address the supplied node resolves do, if we are the resolver.\"},\"appendReputationUpdateLog(address,int256,uint256)\":{\"notice\":\"Adds a reputation update entry to log.\"},\"approveExitRecovery()\":{\"notice\":\"Indicate approval to exit recovery mode. Can only be called by user with recovery role.\"},\"calculateMinerWeight(uint256,uint256)\":{\"notice\":\"Calculate raw miner weight in WADs.\"},\"checkNotAdditionalProtectedVariable(uint256)\":{\"notice\":\"Check whether the supplied slot is a protected variable specific to this contract\"},\"createColony(address)\":{\"notice\":\"Creates a new colony in the network. Note that the token ownership (if there is one) has to be transferred to the newly created colony.\"},\"createMetaColony(address)\":{\"notice\":\"Create the Meta Colony, same as a normal colony plus the root skill.\"},\"deprecateSkill(uint256)\":{\"notice\":\"Mark a global skill as deprecated which stops new tasks and payments from using it.\"},\"enterRecoveryMode()\":{\"notice\":\"Put colony network mining into recovery mode. Can only be called by user with recovery role.\"},\"exitRecoveryMode()\":{\"notice\":\"Exit recovery mode, can be called by anyone if enough whitelist approvals are given.\"},\"getChildSkillId(uint256,uint256)\":{\"notice\":\"Get the id of the child skill at index `_childSkillIndex` for skill with Id `_skillId`.\"},\"getColony(uint256)\":{\"notice\":\"Get a colony address by its Id in the network.\"},\"getColonyCount()\":{\"notice\":\"Get the number of colonies in the network.\"},\"getColonyVersionResolver(uint256)\":{\"notice\":\"Get the `Resolver` address for Colony contract version `_version`.\"},\"getCurrentColonyVersion()\":{\"notice\":\"Returns the latest Colony contract version. This is the version used to create all new colonies.\"},\"getENSRegistrar()\":{\"notice\":\"Returns the address of the ENSRegistrar for the Network.\"},\"getFeeInverse()\":{\"notice\":\"Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100.\"},\"getMetaColony()\":{\"notice\":\"Get the Meta Colony address.\"},\"getMiningResolver()\":{\"notice\":\"Get the resolver to be used by new instances of ReputationMiningCycle.\"},\"getParentSkillId(uint256,uint256)\":{\"notice\":\"Get the id of the parent skill at index `_parentSkillIndex` for skill with Id `_skillId`.\"},\"getProfileDBAddress(bytes32)\":{\"notice\":\"Retrieve the orbitdb address corresponding to a registered account.\"},\"getReplacementReputationUpdateLogEntry(address,uint256)\":{\"notice\":\"Get a replacement log entry (if set) for the log entry `_id` in the mining cycle that was at the address `_reputationMiningCycle`.\"},\"getReplacementReputationUpdateLogsExist(address)\":{\"notice\":\"Get whether any replacement log entries have been set for the supplied reputation mining cycle.Used by the client to avoid doubling the number of RPC calls when syncing from scratch.\"},\"getReputationMiningCycle(bool)\":{\"notice\":\"Get the address of either the active or inactive reputation mining cycle, based on `active`. The active reputation mining cycle is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to.\"},\"getReputationMiningSkillId()\":{\"notice\":\"Get the `skillId` of the reputation mining skill. Only set once the metacolony is set up.\"},\"getReputationRootHash()\":{\"notice\":\"Get the root hash of the current reputation state tree.\"},\"getReputationRootHashNNodes()\":{\"notice\":\"Get the number of nodes in the current reputation state tree.\"},\"getSkill(uint256)\":{\"notice\":\"Get the `nParents` and `nChildren` of skill with id `_skillId`.\"},\"getSkillCount()\":{\"notice\":\"Get the number of skills in the network including both global and local skills.\"},\"getTokenLocking()\":{\"notice\":\"Get token locking contract address.\"},\"initialise(address,uint256)\":{\"notice\":\"Initialises the colony network by setting the first Colony version resolver to `_resolver` address.\"},\"initialiseReputationMining()\":{\"notice\":\"Creates initial inactive reputation mining cycle.\"},\"isColony(address)\":{\"notice\":\"Check if specific address is a colony created on colony network.\"},\"isInRecoveryMode()\":{\"notice\":\"Is colony network in recovery mode.\"},\"lookupRegisteredENSDomain(address)\":{\"notice\":\"Reverse lookup a username from an address.\"},\"numRecoveryRoles()\":{\"notice\":\"Return number of recovery roles.\"},\"registerColonyLabel(string,string)\":{\"notice\":\"Register a \\\"colony.joincolony.eth\\\" label. Can only be called by a Colony.\"},\"registerUserLabel(string,string)\":{\"notice\":\"Register a \\\"user.joincolony.eth\\\" label.\"},\"removeRecoveryRole(address)\":{\"notice\":\"Remove colony recovery role. Can only be called by root role.\"},\"setFeeInverse(uint256)\":{\"notice\":\"Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as `_feeInverse`.\"},\"setMiningResolver(address)\":{\"notice\":\"Set the resolver to be used by new instances of ReputationMiningCycle.\"},\"setRecoveryRole(address)\":{\"notice\":\"Set new colony recovery role. Can be called by root.\"},\"setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)\":{\"notice\":\"Set a replacement log entry if we're in recovery mode.\"},\"setReputationRootHash(bytes32,uint256,address[],uint256)\":{\"notice\":\"Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract.\"},\"setStorageSlotRecovery(uint256,bytes32)\":{\"notice\":\"Update value of arbitrary storage variable. Can only be called by user with recovery role.\"},\"setTokenLocking(address)\":{\"notice\":\"Sets the token locking address. This is only set once, and can't be changed afterwards.\"},\"setupRegistrar(address,bytes32)\":{\"notice\":\"Setup registrar with ENS and root node.\"},\"startNextCycle()\":{\"notice\":\"Starts a new Reputation Mining cycle. Explicitly called only the first time, subsequently called from within `setReputationRootHash`.\"},\"startTokenAuction(address)\":{\"notice\":\"Create and start a new `DutchAuction` for the entire amount of `_token` owned by the Colony Network.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"updateColonyOrbitDB(string)\":{\"notice\":\"Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\"},\"updateUserOrbitDB(string)\":{\"notice\":\"Update a user's orbitdb address. Can only be called by a user with a registered subdomain\"}},\"notice\":\"All publicly available functions are available here and registered to work with EtherRouter Network contract\"}},\"settings\":{\"compilationTarget\":{\"/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/IColony.sol\":\"IColonyNetwork\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/ColonyNetworkDataTypes.sol\":{\"keccak256\":\"0x9982ed70f7a707bd9494fa7ae47152cff3a0eb1e1c1fa88c5e8e888629bc6d28\",\"urls\":[\"bzzr://ddb2564f242926c3d8b51560173916426bf8df31afbbf402a1b939a1f691b4d0\"]},\"/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/IColony.sol\":{\"keccak256\":\"0x317c690d7829837bf1d1c5c6fa329e7c1be0eefbd5f9bbbef8ed58e44aba5cf9\",\"urls\":[\"bzzr://8d331636c8f0532f1d8e2cfb826eedb7fb22683ea3e5b8ec62e57b115c5603d2\"]},\"/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/IRecovery.sol\":{\"keccak256\":\"0xe7b622479c9109ff647e665b2510c8288266aa0a08d1a560f06e967ea75b5513\",\"urls\":[\"bzzr://31f4323f2027cdc528c91c25d423055c53a618edf2f9624d7ed774abe8e6254b\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/*\n  This file is part of The Colony Network.\n\n  The Colony Network is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  The Colony Network is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with The Colony Network. If not, see <http://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.5.8; // ignore-swc-103\npragma experimental \"ABIEncoderV2\";\n\nimport \"./IRecovery.sol\";\nimport \"./ColonyNetworkDataTypes.sol\";\n\n\n/// @title Colony Network interface\n/// @notice All publicly available functions are available here and registered to work with EtherRouter Network contract\ncontract IColonyNetwork is ColonyNetworkDataTypes, IRecovery {\n\n  /// @notice Query if a contract implements an interface\n  /// @param interfaceID The interface identifier, as specified in ERC-165\n  /// @dev Interface identification is specified in ERC-165.\n  /// @return `true` if the contract implements `interfaceID`\n  function supportsInterface(bytes4 interfaceID) external pure returns (bool);\n\n  /// @notice Set a replacement log entry if we're in recovery mode.\n  /// @param _reputationMiningCycle The address of the reputation mining cycle that the log was in.\n  /// @param _id The number of the log entry in the reputation mining cycle in question.\n  /// @param _user The address of the user earning / losing the reputation\n  /// @param _amount The amount of reputation being earned / lost\n  /// @param _skillId The id of the origin skill for the reputation update\n  /// @param _colony The address of the colony being updated\n  /// @param _nUpdates The number of updates the log entry corresponds to\n  /// @param _nPreviousUpdates The number of updates in the log before this entry\n  /// @dev Note that strictly, `_nUpdates` and `_nPreviousUpdates` don't need to be set - they're only used during\n  /// dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing\n  /// the client, we have decided to include them for now.\n  function setReplacementReputationUpdateLogEntry(\n    address _reputationMiningCycle,\n    uint256 _id,\n    address _user,\n    int _amount,\n    uint256 _skillId,\n    address _colony,\n    uint128 _nUpdates,\n    uint128 _nPreviousUpdates\n    ) public;\n\n  /// @notice Get a replacement log entry (if set) for the log entry `_id` in the mining cycle that was at the address `_reputationMiningCycle`.\n  /// @param _reputationMiningCycle The address of the reputation mining cycle we are asking about\n  /// @param _id The log entry number we wish to see if there is a replacement for\n  /// @return reputationLogEntry ReputationLogEntry instance with the details of the log entry (if it exists)\n  function getReplacementReputationUpdateLogEntry(address _reputationMiningCycle, uint256 _id) public view returns\n    (ReputationLogEntry memory reputationLogEntry);\n\n  /// @notice Get whether any replacement log entries have been set for the supplied reputation mining cycle.\n  /// @notice Used by the client to avoid doubling the number of RPC calls when syncing from scratch.\n  /// @param _reputationMiningCycle The reputation mining cycle address we want to know if any entries have been replaced in.\n  /// @return exists Boolean indicating whether there is a replacement log\n  function getReplacementReputationUpdateLogsExist(address _reputationMiningCycle) public view returns (bool exists);\n\n  /// @notice Get the Meta Colony address.\n  /// @return colonyAddress The Meta colony address, if no colony was found, returns 0x0\n  function getMetaColony() public view returns (address payable colonyAddress);\n\n  /// @notice Get the number of colonies in the network.\n  /// @return count The colony count\n  function getColonyCount() public view returns (uint256 count);\n\n  /// @notice Check if specific address is a colony created on colony network.\n  /// @param _colony Address of the colony\n  /// @return addressIsColony true if specified address is a colony, otherwise false\n  function isColony(address _colony) public view returns (bool addressIsColony);\n\n  /// @notice Adds a new skill to the global or local skills tree, under skill `_parentSkillId`.\n  /// Only the Meta Colony is allowed to add a global skill, called via `IColony.addGlobalSkill`.\n  /// Any colony is allowed to add a local skill and which is associated with a new domain via `IColony.addDomain`.\n  /// @dev Errors if the parent skill does not exist or if this is called by an unauthorised sender.\n  /// @param _parentSkillId Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent.\n  /// @return skillId Id of the added skill\n  function addSkill(uint256 _parentSkillId) public returns (uint256 skillId);\n\n  /// @notice Get the `nParents` and `nChildren` of skill with id `_skillId`.\n  /// @param _skillId Id of the skill\n  /// @return skill The Skill struct\n  function getSkill(uint256 _skillId) public view returns (Skill memory skill);\n\n  /// @notice Mark a global skill as deprecated which stops new tasks and payments from using it.\n  /// @param _skillId Id of the skill\n  function deprecateSkill(uint256 _skillId) public;\n\n  /// @notice Adds a reputation update entry to log.\n  /// @dev Errors if it is called by anyone but a colony or if skill with id `_skillId` does not exist or.\n  /// @param _user The address of the user for the reputation update\n  /// @param _amount The amount of reputation change for the update, this can be a negative as well as a positive value\n  /// @param _skillId The skill for the reputation update\n  function appendReputationUpdateLog(address _user, int256 _amount, uint256 _skillId) public;\n\n  /// @notice Get the number of skills in the network including both global and local skills.\n  /// @return count The skill count\n  function getSkillCount() public view returns (uint256 count);\n\n  /// @notice Get the `skillId` of the reputation mining skill. Only set once the metacolony is set up.\n  /// @return skillId The `skillId` of the reputation mining skill.\n  function getReputationMiningSkillId() public view returns (uint256 skillId);\n\n  /// @notice Sets the token locking address.\n  /// This is only set once, and can't be changed afterwards.\n  /// @param _tokenLockingAddress Address of the locking contract\n  function setTokenLocking(address _tokenLockingAddress) public;\n\n  /// @notice Get token locking contract address.\n  /// @return lockingAddress Token locking contract address\n  function getTokenLocking() public view returns (address lockingAddress);\n\n  /// @notice Create the Meta Colony, same as a normal colony plus the root skill.\n  /// @param _tokenAddress Address of the CLNY token\n  function createMetaColony(address _tokenAddress) public;\n\n  /// @notice Creates a new colony in the network.\n  /// Note that the token ownership (if there is one) has to be transferred to the newly created colony.\n  /// @param _tokenAddress Address of an ERC20 token to serve as the colony token.\n  /// Additionally token can optionally support `mint` as defined in `ERC20Extended`.\n  /// Support for `mint` is mandatory only for the Meta Colony Token.\n  /// @return colonyAddress Address of the newly created colony\n  function createColony(address _tokenAddress) public returns (address colonyAddress);\n\n  /// @notice Adds a new Colony contract version and the address of associated `_resolver` contract. Secured function to authorised members.\n  /// Allowed to be called by the Meta Colony only.\n  /// @param _version The new Colony contract version\n  /// @param _resolver Address of the `Resolver` contract which will be used with the underlying `EtherRouter` contract\n  function addColonyVersion(uint256 _version, address _resolver) public;\n\n  /// @notice Initialises the colony network by setting the first Colony version resolver to `_resolver` address.\n  /// @dev Only allowed to be run once, by the Network owner before any Colony versions are added.\n  /// @param _resolver Address of the resolver for Colony contract\n  /// @param _version Version of the Colony contract the resolver represents\n  function initialise(address _resolver, uint256 _version) public;\n\n  /// @notice Get a colony address by its Id in the network.\n  /// @param _id Id of the colony to get\n  /// @return colonyAddress The colony address, if no colony was found, returns 0x0\n  function getColony(uint256 _id) public view returns (address colonyAddress);\n\n  /// @notice Returns the latest Colony contract version. This is the version used to create all new colonies.\n  /// @return version The current / latest Colony contract version\n  function getCurrentColonyVersion() public view returns (uint256 version);\n\n  /// @notice Get the id of the parent skill at index `_parentSkillIndex` for skill with Id `_skillId`.\n  /// @param _skillId Id of the skill\n  /// @param _parentSkillIndex Index of the `skill.parents` array to get\n  /// Note that not all parent skill ids are stored here. See `Skill.parents` member for definition on which parents are stored\n  /// @return skillId Skill Id of the requested parent skill\n  function getParentSkillId(uint256 _skillId, uint256 _parentSkillIndex) public view returns (uint256 skillId);\n\n  /// @notice Get the id of the child skill at index `_childSkillIndex` for skill with Id `_skillId`.\n  /// @param _skillId Id of the skill\n  /// @param _childSkillIndex Index of the `skill.children` array to get\n  /// @return skillId Skill Id of the requested child skill\n  function getChildSkillId(uint256 _skillId, uint256 _childSkillIndex) public view returns (uint256 skillId);\n\n  /// @notice Get the address of either the active or inactive reputation mining cycle, based on `active`. The active reputation mining cycle\n  /// is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to.\n  /// @param _active Whether the user wants the active or inactive reputation mining cycle\n  /// @return repMiningCycleAddress address of active or inactive ReputationMiningCycle\n  function getReputationMiningCycle(bool _active) public view returns (address repMiningCycleAddress);\n\n  /// @notice Calculate raw miner weight in WADs.\n  /// @param _timeStaked Amount of time (in seconds) that the miner has staked their CLNY\n  /// @param _submissonIndex Index of reputation hash submission (between 0 and 11)\n  /// @return minerWeight The weight of miner reward\n  function calculateMinerWeight(uint256 _timeStaked, uint256 _submissonIndex) public pure returns (uint256 minerWeight);\n\n  /// @notice Get the `Resolver` address for Colony contract version `_version`.\n  /// @param _version The Colony contract version\n  /// @return resolverAddress Address of the `Resolver` contract\n  function getColonyVersionResolver(uint256 _version) public view returns (address resolverAddress);\n\n  /// @notice Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract.\n  /// @param newHash The reputation root hash\n  /// @param newNNodes The updated nodes count value\n  /// @param stakers Array of users who submitted or backed the hash, being accepted here as the new reputation root hash\n  /// @param reward Amount of CLNY to be distributed as reward to miners\n  function setReputationRootHash(bytes32 newHash, uint256 newNNodes, address[] memory stakers, uint256 reward) public;\n\n  /// @notice Starts a new Reputation Mining cycle. Explicitly called only the first time,\n  /// subsequently called from within `setReputationRootHash`.\n  function startNextCycle() public;\n\n  /// @notice Creates initial inactive reputation mining cycle.\n  function initialiseReputationMining() public;\n\n  /// @notice Get the root hash of the current reputation state tree.\n  /// @return rootHash The current Reputation Root Hash\n  function getReputationRootHash() public view returns (bytes32 rootHash);\n\n  /// @notice Get the number of nodes in the current reputation state tree.\n  /// @dev I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.\n  /// @return nNodes uint256 The number of nodes in the state tree\n  function getReputationRootHashNNodes() public view returns (uint256 nNodes);\n\n  /// @notice Create and start a new `DutchAuction` for the entire amount of `_token` owned by the Colony Network.\n  /// @param _token Address of the token held by the network to be auctioned\n  function startTokenAuction(address _token) public;\n\n  /// @notice Setup registrar with ENS and root node.\n  /// @param _ens Address of ENS registrar\n  /// @param _rootNode Namehash of the root node for the domain\n  function setupRegistrar(address _ens, bytes32 _rootNode) public;\n\n  /// @notice Register a \"user.joincolony.eth\" label.\n  /// @param username The label to register\n  /// @param orbitdb The path of the orbitDB database associated with the user profile\n  function registerUserLabel(string memory username, string memory orbitdb) public;\n\n  /// @notice Register a \"colony.joincolony.eth\" label. Can only be called by a Colony.\n  /// @param colonyName The label to register.\n  /// @param orbitdb The path of the orbitDB database associated with the colony name\n  function registerColonyLabel(string memory colonyName, string memory orbitdb) public;\n\n  /// @notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n  /// @param orbitdb The path of the orbitDB database to be associated with the colony\n  function updateColonyOrbitDB(string memory orbitdb) public;\n\n  /// @notice Update a user's orbitdb address. Can only be called by a user with a registered subdomain\n  /// @param orbitdb The path of the orbitDB database to be associated with the user\n  function updateUserOrbitDB(string memory orbitdb) public;\n\n  /// @notice Retrieve the orbitdb address corresponding to a registered account.\n  /// @param node The Namehash of the account being queried.\n  /// @return orbitDB A string containing the address of the orbit database\n  function getProfileDBAddress(bytes32 node) public view returns (string memory orbitDB);\n\n  /// @notice Reverse lookup a username from an address.\n  /// @param addr The address we wish to find the corresponding ENS domain for (if any)\n  /// @return domain A string containing the colony-based ENS name corresponding to addr\n  function lookupRegisteredENSDomain(address addr) public view returns(string memory domain);\n\n  /// @notice Returns the address the supplied node resolves do, if we are the resolver.\n  /// @param node The namehash of the ENS address being requested\n  /// @return address The address the supplied node resolves to\n  function addr(bytes32 node) public view returns (address);\n\n  /// @notice Returns the address of the ENSRegistrar for the Network.\n  /// @return address The address the ENSRegistrar resolves to\n  function getENSRegistrar() public view returns (address);\n\n  /// @notice Set the resolver to be used by new instances of ReputationMiningCycle.\n  /// @param miningResolverAddress The address of the Resolver contract with the functions correctly wired.\n  function setMiningResolver(address miningResolverAddress) public;\n\n  /// @notice Get the resolver to be used by new instances of ReputationMiningCycle.\n  /// @return miningResolverAddress The address of the mining cycle resolver currently used by new instances\n  function getMiningResolver() public view returns (address miningResolverAddress);\n\n  /// @notice Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100.\n  /// @return _feeInverse The inverse of the network fee\n  function getFeeInverse() public view returns (uint256 _feeInverse);\n\n  /// @notice Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as `_feeInverse`.\n  /// @param _feeInverse The inverse of the network fee to set\n  function setFeeInverse(uint256 _feeInverse) public;\n}\n",
  "sourcePath": "/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/IColony.sol",
  "ast": {
    "absolutePath": "/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/IColony.sol",
    "exportedSymbols": {
      "IColonyNetwork": [
        1864
      ]
    },
    "id": 1865,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1560,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "700:24:6"
      },
      {
        "id": 1561,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "743:35:6"
      },
      {
        "absolutePath": "/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/IRecovery.sol",
        "file": "./IRecovery.sol",
        "id": 1562,
        "nodeType": "ImportDirective",
        "scope": 1865,
        "sourceUnit": 2601,
        "src": "780:25:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/ColonyNetworkDataTypes.sol",
        "file": "./ColonyNetworkDataTypes.sol",
        "id": 1563,
        "nodeType": "ImportDirective",
        "scope": 1865,
        "sourceUnit": 1220,
        "src": "806:38:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1564,
              "name": "ColonyNetworkDataTypes",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1219,
              "src": "1031:22:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ColonyNetworkDataTypes_$1219",
                "typeString": "contract ColonyNetworkDataTypes"
              }
            },
            "id": 1565,
            "nodeType": "InheritanceSpecifier",
            "src": "1031:22:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1566,
              "name": "IRecovery",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2600,
              "src": "1055:9:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IRecovery_$2600",
                "typeString": "contract IRecovery"
              }
            },
            "id": 1567,
            "nodeType": "InheritanceSpecifier",
            "src": "1055:9:6"
          }
        ],
        "contractDependencies": [
          1219,
          2600
        ],
        "contractKind": "contract",
        "documentation": "@title Colony Network interface\n @notice All publicly available functions are available here and registered to work with EtherRouter Network contract",
        "fullyImplemented": false,
        "id": 1864,
        "linearizedBaseContracts": [
          1864,
          2600,
          1219
        ],
        "name": "IColonyNetwork",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice Query if a contract implements an interface\n @param interfaceID The interface identifier, as specified in ERC-165\n @dev Interface identification is specified in ERC-165.\n @return `true` if the contract implements `interfaceID`",
            "id": 1574,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1570,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1569,
                  "name": "interfaceID",
                  "nodeType": "VariableDeclaration",
                  "scope": 1574,
                  "src": "1353:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1568,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1353:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1352:20:6"
            },
            "returnParameters": {
              "id": 1573,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1572,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1574,
                  "src": "1396:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1571,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1396:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1395:6:6"
            },
            "scope": 1864,
            "src": "1326:76:6",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Set a replacement log entry if we're in recovery mode.\n @param _reputationMiningCycle The address of the reputation mining cycle that the log was in.\n @param _id The number of the log entry in the reputation mining cycle in question.\n @param _user The address of the user earning / losing the reputation\n @param _amount The amount of reputation being earned / lost\n @param _skillId The id of the origin skill for the reputation update\n @param _colony The address of the colony being updated\n @param _nUpdates The number of updates the log entry corresponds to\n @param _nPreviousUpdates The number of updates in the log before this entry\n @dev Note that strictly, `_nUpdates` and `_nPreviousUpdates` don't need to be set - they're only used during\n dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing\n the client, we have decided to include them for now.",
            "id": 1593,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setReplacementReputationUpdateLogEntry",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1591,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1576,
                  "name": "_reputationMiningCycle",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2437:30:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1575,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2437:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1578,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2473:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1577,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2473:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1580,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2490:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1579,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2490:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1582,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2509:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 1581,
                    "name": "int",
                    "nodeType": "ElementaryTypeName",
                    "src": "2509:3:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1584,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2526:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1583,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2526:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1586,
                  "name": "_colony",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2548:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1585,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2548:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1588,
                  "name": "_nUpdates",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2569:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 1587,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2569:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1590,
                  "name": "_nPreviousUpdates",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2592:25:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 1589,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2592:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2431:192:6"
            },
            "returnParameters": {
              "id": 1592,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2630:0:6"
            },
            "scope": 1864,
            "src": "2384:247:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get a replacement log entry (if set) for the log entry `_id` in the mining cycle that was at the address `_reputationMiningCycle`.\n @param _reputationMiningCycle The address of the reputation mining cycle we are asking about\n @param _id The log entry number we wish to see if there is a replacement for\n @return reputationLogEntry ReputationLogEntry instance with the details of the log entry (if it exists)",
            "id": 1602,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReplacementReputationUpdateLogEntry",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1598,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1595,
                  "name": "_reputationMiningCycle",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "3120:30:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1594,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3120:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1597,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "3152:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1596,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3152:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3119:45:6"
            },
            "returnParameters": {
              "id": 1601,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1600,
                  "name": "reputationLogEntry",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "3190:44:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ReputationLogEntry_$1218_memory_ptr",
                    "typeString": "struct ColonyNetworkDataTypes.ReputationLogEntry"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 1599,
                    "name": "ReputationLogEntry",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1218,
                    "src": "3190:18:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ReputationLogEntry_$1218_storage_ptr",
                      "typeString": "struct ColonyNetworkDataTypes.ReputationLogEntry"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3189:46:6"
            },
            "scope": 1864,
            "src": "3072:164:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get whether any replacement log entries have been set for the supplied reputation mining cycle.\n @notice Used by the client to avoid doubling the number of RPC calls when syncing from scratch.\n @param _reputationMiningCycle The reputation mining cycle address we want to know if any entries have been replaced in.\n @return exists Boolean indicating whether there is a replacement log",
            "id": 1609,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReplacementReputationUpdateLogsExist",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1605,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1604,
                  "name": "_reputationMiningCycle",
                  "nodeType": "VariableDeclaration",
                  "scope": 1609,
                  "src": "3702:30:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1603,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3702:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3701:32:6"
            },
            "returnParameters": {
              "id": 1608,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1607,
                  "name": "exists",
                  "nodeType": "VariableDeclaration",
                  "scope": 1609,
                  "src": "3755:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1606,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3755:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3754:13:6"
            },
            "scope": 1864,
            "src": "3653:115:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the Meta Colony address.\n @return colonyAddress The Meta colony address, if no colony was found, returns 0x0",
            "id": 1614,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMetaColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1610,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3926:2:6"
            },
            "returnParameters": {
              "id": 1613,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1612,
                  "name": "colonyAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1614,
                  "src": "3950:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 1611,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3950:15:6",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3949:31:6"
            },
            "scope": 1864,
            "src": "3904:77:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of colonies in the network.\n @return count The colony count",
            "id": 1619,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColonyCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1615,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4102:2:6"
            },
            "returnParameters": {
              "id": 1618,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1617,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 1619,
                  "src": "4126:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1616,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4126:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4125:15:6"
            },
            "scope": 1864,
            "src": "4079:62:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Check if specific address is a colony created on colony network.\n @param _colony Address of the colony\n @return addressIsColony true if specified address is a colony, otherwise false",
            "id": 1626,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1622,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1621,
                  "name": "_colony",
                  "nodeType": "VariableDeclaration",
                  "scope": 1626,
                  "src": "4370:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1620,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4370:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4369:17:6"
            },
            "returnParameters": {
              "id": 1625,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1624,
                  "name": "addressIsColony",
                  "nodeType": "VariableDeclaration",
                  "scope": 1626,
                  "src": "4408:20:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1623,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4408:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4407:22:6"
            },
            "scope": 1864,
            "src": "4352:78:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Adds a new skill to the global or local skills tree, under skill `_parentSkillId`.\n Only the Meta Colony is allowed to add a global skill, called via `IColony.addGlobalSkill`.\n Any colony is allowed to add a local skill and which is associated with a new domain via `IColony.addDomain`.\n @dev Errors if the parent skill does not exist or if this is called by an unauthorised sender.\n @param _parentSkillId Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent.\n @return skillId Id of the added skill",
            "id": 1633,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1629,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1628,
                  "name": "_parentSkillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1633,
                  "src": "5039:22:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1627,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5039:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5038:24:6"
            },
            "returnParameters": {
              "id": 1632,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1631,
                  "name": "skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1633,
                  "src": "5079:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1630,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5079:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5078:17:6"
            },
            "scope": 1864,
            "src": "5021:75:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `nParents` and `nChildren` of skill with id `_skillId`.\n @param _skillId Id of the skill\n @return skill The Skill struct",
            "id": 1640,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1636,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1635,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1640,
                  "src": "5271:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1634,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5271:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5270:18:6"
            },
            "returnParameters": {
              "id": 1639,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1638,
                  "name": "skill",
                  "nodeType": "VariableDeclaration",
                  "scope": 1640,
                  "src": "5310:18:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Skill_$1200_memory_ptr",
                    "typeString": "struct ColonyNetworkDataTypes.Skill"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 1637,
                    "name": "Skill",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1200,
                    "src": "5310:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Skill_$1200_storage_ptr",
                      "typeString": "struct ColonyNetworkDataTypes.Skill"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5309:20:6"
            },
            "scope": 1864,
            "src": "5253:77:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Mark a global skill as deprecated which stops new tasks and payments from using it.\n @param _skillId Id of the skill",
            "id": 1645,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deprecateSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1643,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1642,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1645,
                  "src": "5494:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1641,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5494:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5493:18:6"
            },
            "returnParameters": {
              "id": 1644,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5518:0:6"
            },
            "scope": 1864,
            "src": "5470:49:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Adds a reputation update entry to log.\n @dev Errors if it is called by anyone but a colony or if skill with id `_skillId` does not exist or.\n @param _user The address of the user for the reputation update\n @param _amount The amount of reputation change for the update, this can be a negative as well as a positive value\n @param _skillId The skill for the reputation update",
            "id": 1654,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "appendReputationUpdateLog",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1652,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1647,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 1654,
                  "src": "5965:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1646,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5965:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1649,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1654,
                  "src": "5980:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 1648,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5980:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1651,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1654,
                  "src": "5996:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1650,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5996:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5964:49:6"
            },
            "returnParameters": {
              "id": 1653,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6020:0:6"
            },
            "scope": 1864,
            "src": "5930:91:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of skills in the network including both global and local skills.\n @return count The skill count",
            "id": 1659,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSkillCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1655,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6177:2:6"
            },
            "returnParameters": {
              "id": 1658,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1657,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 1659,
                  "src": "6201:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1656,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6201:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6200:15:6"
            },
            "scope": 1864,
            "src": "6155:61:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `skillId` of the reputation mining skill. Only set once the metacolony is set up.\n @return skillId The `skillId` of the reputation mining skill.",
            "id": 1664,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationMiningSkillId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1660,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6427:2:6"
            },
            "returnParameters": {
              "id": 1663,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1662,
                  "name": "skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1664,
                  "src": "6451:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1661,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6451:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6450:17:6"
            },
            "scope": 1864,
            "src": "6392:76:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the token locking address.\n This is only set once, and can't be changed afterwards.\n @param _tokenLockingAddress Address of the locking contract",
            "id": 1669,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTokenLocking",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1667,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1666,
                  "name": "_tokenLockingAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1669,
                  "src": "6671:28:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1665,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6671:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6670:30:6"
            },
            "returnParameters": {
              "id": 1668,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6707:0:6"
            },
            "scope": 1864,
            "src": "6646:62:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get token locking contract address.\n @return lockingAddress Token locking contract address",
            "id": 1674,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenLocking",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1670,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6846:2:6"
            },
            "returnParameters": {
              "id": 1673,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1672,
                  "name": "lockingAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1674,
                  "src": "6870:22:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1671,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6870:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6869:24:6"
            },
            "scope": 1864,
            "src": "6822:72:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Create the Meta Colony, same as a normal colony plus the root skill.\n @param _tokenAddress Address of the CLNY token",
            "id": 1679,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createMetaColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1677,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1676,
                  "name": "_tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1679,
                  "src": "7060:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1675,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7060:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7059:23:6"
            },
            "returnParameters": {
              "id": 1678,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7089:0:6"
            },
            "scope": 1864,
            "src": "7034:56:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Creates a new colony in the network.\n Note that the token ownership (if there is one) has to be transferred to the newly created colony.\n @param _tokenAddress Address of an ERC20 token to serve as the colony token.\n Additionally token can optionally support `mint` as defined in `ERC20Extended`.\n Support for `mint` is mandatory only for the Meta Colony Token.\n @return colonyAddress Address of the newly created colony",
            "id": 1686,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1682,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1681,
                  "name": "_tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1686,
                  "src": "7575:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1680,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7575:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7574:23:6"
            },
            "returnParameters": {
              "id": 1685,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1684,
                  "name": "colonyAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1686,
                  "src": "7614:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1683,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7614:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7613:23:6"
            },
            "scope": 1864,
            "src": "7553:84:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Adds a new Colony contract version and the address of associated `_resolver` contract. Secured function to authorised members.\n Allowed to be called by the Meta Colony only.\n @param _version The new Colony contract version\n @param _resolver Address of the `Resolver` contract which will be used with the underlying `EtherRouter` contract",
            "id": 1693,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addColonyVersion",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1691,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1688,
                  "name": "_version",
                  "nodeType": "VariableDeclaration",
                  "scope": 1693,
                  "src": "8034:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1687,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8034:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1690,
                  "name": "_resolver",
                  "nodeType": "VariableDeclaration",
                  "scope": 1693,
                  "src": "8052:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1689,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8052:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8033:37:6"
            },
            "returnParameters": {
              "id": 1692,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8077:0:6"
            },
            "scope": 1864,
            "src": "8008:70:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Initialises the colony network by setting the first Colony version resolver to `_resolver` address.\n @dev Only allowed to be run once, by the Network owner before any Colony versions are added.\n @param _resolver Address of the resolver for Colony contract\n @param _version Version of the Colony contract the resolver represents",
            "id": 1700,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialise",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1698,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1695,
                  "name": "_resolver",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "8459:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1694,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8459:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1697,
                  "name": "_version",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "8478:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1696,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8478:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8458:37:6"
            },
            "returnParameters": {
              "id": 1699,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8502:0:6"
            },
            "scope": 1864,
            "src": "8439:64:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get a colony address by its Id in the network.\n @param _id Id of the colony to get\n @return colonyAddress The colony address, if no colony was found, returns 0x0",
            "id": 1707,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1703,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1702,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 1707,
                  "src": "8712:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1701,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8712:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8711:13:6"
            },
            "returnParameters": {
              "id": 1706,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1705,
                  "name": "colonyAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1707,
                  "src": "8746:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1704,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8746:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8745:23:6"
            },
            "scope": 1864,
            "src": "8693:76:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns the latest Colony contract version. This is the version used to create all new colonies.\n @return version The current / latest Colony contract version",
            "id": 1712,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getCurrentColonyVersion",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1708,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8983:2:6"
            },
            "returnParameters": {
              "id": 1711,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1710,
                  "name": "version",
                  "nodeType": "VariableDeclaration",
                  "scope": 1712,
                  "src": "9007:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1709,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9007:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9006:17:6"
            },
            "scope": 1864,
            "src": "8951:73:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the id of the parent skill at index `_parentSkillIndex` for skill with Id `_skillId`.\n @param _skillId Id of the skill\n @param _parentSkillIndex Index of the `skill.parents` array to get\n Note that not all parent skill ids are stored here. See `Skill.parents` member for definition on which parents are stored\n @return skillId Skill Id of the requested parent skill",
            "id": 1721,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getParentSkillId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1717,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1714,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1721,
                  "src": "9458:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1713,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9458:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1716,
                  "name": "_parentSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 1721,
                  "src": "9476:25:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1715,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9476:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9457:45:6"
            },
            "returnParameters": {
              "id": 1720,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1719,
                  "name": "skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1721,
                  "src": "9524:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1718,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9524:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9523:17:6"
            },
            "scope": 1864,
            "src": "9432:109:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the id of the child skill at index `_childSkillIndex` for skill with Id `_skillId`.\n @param _skillId Id of the skill\n @param _childSkillIndex Index of the `skill.children` array to get\n @return skillId Skill Id of the requested child skill",
            "id": 1730,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getChildSkillId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1726,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1723,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1730,
                  "src": "9843:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1722,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9843:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1725,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 1730,
                  "src": "9861:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1724,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9861:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9842:44:6"
            },
            "returnParameters": {
              "id": 1729,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1728,
                  "name": "skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1730,
                  "src": "9908:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1727,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9908:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9907:17:6"
            },
            "scope": 1864,
            "src": "9818:107:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the address of either the active or inactive reputation mining cycle, based on `active`. The active reputation mining cycle\n is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to.\n @param _active Whether the user wants the active or inactive reputation mining cycle\n @return repMiningCycleAddress address of active or inactive ReputationMiningCycle",
            "id": 1737,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationMiningCycle",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1733,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1732,
                  "name": "_active",
                  "nodeType": "VariableDeclaration",
                  "scope": 1737,
                  "src": "10434:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1731,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10434:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10433:14:6"
            },
            "returnParameters": {
              "id": 1736,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1735,
                  "name": "repMiningCycleAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1737,
                  "src": "10469:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1734,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10469:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10468:31:6"
            },
            "scope": 1864,
            "src": "10400:100:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Calculate raw miner weight in WADs.\n @param _timeStaked Amount of time (in seconds) that the miner has staked their CLNY\n @param _submissonIndex Index of reputation hash submission (between 0 and 11)\n @return minerWeight The weight of miner reward",
            "id": 1746,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calculateMinerWeight",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1742,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1739,
                  "name": "_timeStaked",
                  "nodeType": "VariableDeclaration",
                  "scope": 1746,
                  "src": "10811:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1738,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10811:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1741,
                  "name": "_submissonIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 1746,
                  "src": "10832:23:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1740,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10832:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10810:46:6"
            },
            "returnParameters": {
              "id": 1745,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1744,
                  "name": "minerWeight",
                  "nodeType": "VariableDeclaration",
                  "scope": 1746,
                  "src": "10878:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1743,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10878:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10877:21:6"
            },
            "scope": 1864,
            "src": "10781:118:6",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `Resolver` address for Colony contract version `_version`.\n @param _version The Colony contract version\n @return resolverAddress Address of the `Resolver` contract",
            "id": 1753,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColonyVersionResolver",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1749,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1748,
                  "name": "_version",
                  "nodeType": "VariableDeclaration",
                  "scope": 1753,
                  "src": "11133:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1747,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11133:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11132:18:6"
            },
            "returnParameters": {
              "id": 1752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1751,
                  "name": "resolverAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1753,
                  "src": "11172:23:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1750,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11172:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11171:25:6"
            },
            "scope": 1864,
            "src": "11099:98:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract.\n @param newHash The reputation root hash\n @param newNNodes The updated nodes count value\n @param stakers Array of users who submitted or backed the hash, being accepted here as the new reputation root hash\n @param reward Amount of CLNY to be distributed as reward to miners",
            "id": 1765,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setReputationRootHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1763,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1755,
                  "name": "newHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 1765,
                  "src": "11660:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1754,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "11660:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1757,
                  "name": "newNNodes",
                  "nodeType": "VariableDeclaration",
                  "scope": 1765,
                  "src": "11677:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1756,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11677:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1760,
                  "name": "stakers",
                  "nodeType": "VariableDeclaration",
                  "scope": 1765,
                  "src": "11696:24:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1758,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "11696:7:6",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1759,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "11696:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1762,
                  "name": "reward",
                  "nodeType": "VariableDeclaration",
                  "scope": 1765,
                  "src": "11722:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1761,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11722:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11659:78:6"
            },
            "returnParameters": {
              "id": 1764,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11744:0:6"
            },
            "scope": 1864,
            "src": "11629:116:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Starts a new Reputation Mining cycle. Explicitly called only the first time,\n subsequently called from within `setReputationRootHash`.",
            "id": 1768,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "startNextCycle",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1766,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11926:2:6"
            },
            "returnParameters": {
              "id": 1767,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11935:0:6"
            },
            "scope": 1864,
            "src": "11903:33:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Creates initial inactive reputation mining cycle.",
            "id": 1771,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialiseReputationMining",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1769,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12039:2:6"
            },
            "returnParameters": {
              "id": 1770,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12048:0:6"
            },
            "scope": 1864,
            "src": "12004:45:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the root hash of the current reputation state tree.\n @return rootHash The current Reputation Root Hash",
            "id": 1776,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationRootHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1772,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12209:2:6"
            },
            "returnParameters": {
              "id": 1775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1774,
                  "name": "rootHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 1776,
                  "src": "12233:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1773,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12233:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12232:18:6"
            },
            "scope": 1864,
            "src": "12179:72:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of nodes in the current reputation state tree.\n @dev I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.\n @return nNodes uint256 The number of nodes in the state tree",
            "id": 1781,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationRootHashNNodes",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12595:2:6"
            },
            "returnParameters": {
              "id": 1780,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1779,
                  "name": "nNodes",
                  "nodeType": "VariableDeclaration",
                  "scope": 1781,
                  "src": "12619:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1778,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12619:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12618:16:6"
            },
            "scope": 1864,
            "src": "12559:76:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Create and start a new `DutchAuction` for the entire amount of `_token` owned by the Colony Network.\n @param _token Address of the token held by the network to be auctioned",
            "id": 1786,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "startTokenAuction",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1784,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1783,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 1786,
                  "src": "12858:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1782,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12858:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12857:16:6"
            },
            "returnParameters": {
              "id": 1785,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12880:0:6"
            },
            "scope": 1864,
            "src": "12831:50:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Setup registrar with ENS and root node.\n @param _ens Address of ENS registrar\n @param _rootNode Namehash of the root node for the domain",
            "id": 1793,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setupRegistrar",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1791,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1788,
                  "name": "_ens",
                  "nodeType": "VariableDeclaration",
                  "scope": 1793,
                  "src": "13070:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1787,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13070:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1790,
                  "name": "_rootNode",
                  "nodeType": "VariableDeclaration",
                  "scope": 1793,
                  "src": "13084:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1789,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "13084:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13069:33:6"
            },
            "returnParameters": {
              "id": 1792,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13109:0:6"
            },
            "scope": 1864,
            "src": "13046:64:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Register a \"user.joincolony.eth\" label.\n @param username The label to register\n @param orbitdb The path of the orbitDB database associated with the user profile",
            "id": 1800,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerUserLabel",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1798,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1795,
                  "name": "username",
                  "nodeType": "VariableDeclaration",
                  "scope": 1800,
                  "src": "13326:22:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1794,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13326:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1797,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 1800,
                  "src": "13350:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1796,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13350:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13325:47:6"
            },
            "returnParameters": {
              "id": 1799,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13379:0:6"
            },
            "scope": 1864,
            "src": "13299:81:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Register a \"colony.joincolony.eth\" label. Can only be called by a Colony.\n @param colonyName The label to register.\n @param orbitdb The path of the orbitDB database associated with the colony name",
            "id": 1807,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerColonyLabel",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1805,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1802,
                  "name": "colonyName",
                  "nodeType": "VariableDeclaration",
                  "scope": 1807,
                  "src": "13634:24:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1801,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13634:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1804,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 1807,
                  "src": "13660:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1803,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13660:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13633:49:6"
            },
            "returnParameters": {
              "id": 1806,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13689:0:6"
            },
            "scope": 1864,
            "src": "13605:85:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n @param orbitdb The path of the orbitDB database to be associated with the colony",
            "id": 1812,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateColonyOrbitDB",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1810,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1809,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 1812,
                  "src": "13918:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1808,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13918:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13917:23:6"
            },
            "returnParameters": {
              "id": 1811,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13947:0:6"
            },
            "scope": 1864,
            "src": "13889:59:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Update a user's orbitdb address. Can only be called by a user with a registered subdomain\n @param orbitdb The path of the orbitDB database to be associated with the user",
            "id": 1817,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateUserOrbitDB",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1815,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1814,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 1817,
                  "src": "14168:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1813,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "14168:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14167:23:6"
            },
            "returnParameters": {
              "id": 1816,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14197:0:6"
            },
            "scope": 1864,
            "src": "14141:57:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Retrieve the orbitdb address corresponding to a registered account.\n @param node The Namehash of the account being queried.\n @return orbitDB A string containing the address of the orbit database",
            "id": 1824,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getProfileDBAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1820,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1819,
                  "name": "node",
                  "nodeType": "VariableDeclaration",
                  "scope": 1824,
                  "src": "14450:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1818,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "14450:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14449:14:6"
            },
            "returnParameters": {
              "id": 1823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1822,
                  "name": "orbitDB",
                  "nodeType": "VariableDeclaration",
                  "scope": 1824,
                  "src": "14485:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1821,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "14485:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14484:23:6"
            },
            "scope": 1864,
            "src": "14421:87:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Reverse lookup a username from an address.\n @param addr The address we wish to find the corresponding ENS domain for (if any)\n @return domain A string containing the colony-based ENS name corresponding to addr",
            "id": 1831,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lookupRegisteredENSDomain",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1827,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1826,
                  "name": "addr",
                  "nodeType": "VariableDeclaration",
                  "scope": 1831,
                  "src": "14781:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1825,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14781:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14780:14:6"
            },
            "returnParameters": {
              "id": 1830,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1829,
                  "name": "domain",
                  "nodeType": "VariableDeclaration",
                  "scope": 1831,
                  "src": "14815:20:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1828,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "14815:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14814:22:6"
            },
            "scope": 1864,
            "src": "14746:91:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns the address the supplied node resolves do, if we are the resolver.\n @param node The namehash of the ENS address being requested\n @return address The address the supplied node resolves to",
            "id": 1838,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addr",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1834,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1833,
                  "name": "node",
                  "nodeType": "VariableDeclaration",
                  "scope": 1838,
                  "src": "15074:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1832,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "15074:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15073:14:6"
            },
            "returnParameters": {
              "id": 1837,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1836,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1838,
                  "src": "15109:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1835,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15109:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15108:9:6"
            },
            "scope": 1864,
            "src": "15060:58:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns the address of the ENSRegistrar for the Network.\n @return address The address the ENSRegistrar resolves to",
            "id": 1843,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getENSRegistrar",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1839,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15280:2:6"
            },
            "returnParameters": {
              "id": 1842,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1841,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1843,
                  "src": "15304:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1840,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15304:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15303:9:6"
            },
            "scope": 1864,
            "src": "15256:57:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the resolver to be used by new instances of ReputationMiningCycle.\n @param miningResolverAddress The address of the Resolver contract with the functions correctly wired.",
            "id": 1848,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMiningResolver",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1846,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1845,
                  "name": "miningResolverAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1848,
                  "src": "15537:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1844,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15537:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15536:31:6"
            },
            "returnParameters": {
              "id": 1847,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15574:0:6"
            },
            "scope": 1864,
            "src": "15510:65:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the resolver to be used by new instances of ReputationMiningCycle.\n @return miningResolverAddress The address of the mining cycle resolver currently used by new instances",
            "id": 1853,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMiningResolver",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1849,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15799:2:6"
            },
            "returnParameters": {
              "id": 1852,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1851,
                  "name": "miningResolverAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1853,
                  "src": "15823:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1850,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15823:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15822:31:6"
            },
            "scope": 1864,
            "src": "15773:81:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100.\n @return _feeInverse The inverse of the network fee",
            "id": 1858,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFeeInverse",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1854,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16038:2:6"
            },
            "returnParameters": {
              "id": 1857,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1856,
                  "name": "_feeInverse",
                  "nodeType": "VariableDeclaration",
                  "scope": 1858,
                  "src": "16062:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1855,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16062:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16061:21:6"
            },
            "scope": 1864,
            "src": "16016:67:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as `_feeInverse`.\n @param _feeInverse The inverse of the network fee to set",
            "id": 1863,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setFeeInverse",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1860,
                  "name": "_feeInverse",
                  "nodeType": "VariableDeclaration",
                  "scope": 1863,
                  "src": "16282:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1859,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16282:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16281:21:6"
            },
            "returnParameters": {
              "id": 1862,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16309:0:6"
            },
            "scope": 1864,
            "src": "16259:51:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1865,
        "src": "1004:15308:6"
      }
    ],
    "src": "700:15613:6"
  },
  "legacyAST": {
    "absolutePath": "/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/IColony.sol",
    "exportedSymbols": {
      "IColonyNetwork": [
        1864
      ]
    },
    "id": 1865,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1560,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "700:24:6"
      },
      {
        "id": 1561,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "743:35:6"
      },
      {
        "absolutePath": "/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/IRecovery.sol",
        "file": "./IRecovery.sol",
        "id": 1562,
        "nodeType": "ImportDirective",
        "scope": 1865,
        "sourceUnit": 2601,
        "src": "780:25:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kronosapiens/code/colony/warsaw/les-contracts/contracts/lib/colony/ColonyNetworkDataTypes.sol",
        "file": "./ColonyNetworkDataTypes.sol",
        "id": 1563,
        "nodeType": "ImportDirective",
        "scope": 1865,
        "sourceUnit": 1220,
        "src": "806:38:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1564,
              "name": "ColonyNetworkDataTypes",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1219,
              "src": "1031:22:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ColonyNetworkDataTypes_$1219",
                "typeString": "contract ColonyNetworkDataTypes"
              }
            },
            "id": 1565,
            "nodeType": "InheritanceSpecifier",
            "src": "1031:22:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1566,
              "name": "IRecovery",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2600,
              "src": "1055:9:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IRecovery_$2600",
                "typeString": "contract IRecovery"
              }
            },
            "id": 1567,
            "nodeType": "InheritanceSpecifier",
            "src": "1055:9:6"
          }
        ],
        "contractDependencies": [
          1219,
          2600
        ],
        "contractKind": "contract",
        "documentation": "@title Colony Network interface\n @notice All publicly available functions are available here and registered to work with EtherRouter Network contract",
        "fullyImplemented": false,
        "id": 1864,
        "linearizedBaseContracts": [
          1864,
          2600,
          1219
        ],
        "name": "IColonyNetwork",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice Query if a contract implements an interface\n @param interfaceID The interface identifier, as specified in ERC-165\n @dev Interface identification is specified in ERC-165.\n @return `true` if the contract implements `interfaceID`",
            "id": 1574,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1570,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1569,
                  "name": "interfaceID",
                  "nodeType": "VariableDeclaration",
                  "scope": 1574,
                  "src": "1353:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1568,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1353:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1352:20:6"
            },
            "returnParameters": {
              "id": 1573,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1572,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1574,
                  "src": "1396:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1571,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1396:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1395:6:6"
            },
            "scope": 1864,
            "src": "1326:76:6",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Set a replacement log entry if we're in recovery mode.\n @param _reputationMiningCycle The address of the reputation mining cycle that the log was in.\n @param _id The number of the log entry in the reputation mining cycle in question.\n @param _user The address of the user earning / losing the reputation\n @param _amount The amount of reputation being earned / lost\n @param _skillId The id of the origin skill for the reputation update\n @param _colony The address of the colony being updated\n @param _nUpdates The number of updates the log entry corresponds to\n @param _nPreviousUpdates The number of updates in the log before this entry\n @dev Note that strictly, `_nUpdates` and `_nPreviousUpdates` don't need to be set - they're only used during\n dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing\n the client, we have decided to include them for now.",
            "id": 1593,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setReplacementReputationUpdateLogEntry",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1591,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1576,
                  "name": "_reputationMiningCycle",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2437:30:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1575,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2437:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1578,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2473:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1577,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2473:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1580,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2490:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1579,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2490:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1582,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2509:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 1581,
                    "name": "int",
                    "nodeType": "ElementaryTypeName",
                    "src": "2509:3:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1584,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2526:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1583,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2526:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1586,
                  "name": "_colony",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2548:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1585,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2548:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1588,
                  "name": "_nUpdates",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2569:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 1587,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2569:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1590,
                  "name": "_nPreviousUpdates",
                  "nodeType": "VariableDeclaration",
                  "scope": 1593,
                  "src": "2592:25:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 1589,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2592:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2431:192:6"
            },
            "returnParameters": {
              "id": 1592,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2630:0:6"
            },
            "scope": 1864,
            "src": "2384:247:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get a replacement log entry (if set) for the log entry `_id` in the mining cycle that was at the address `_reputationMiningCycle`.\n @param _reputationMiningCycle The address of the reputation mining cycle we are asking about\n @param _id The log entry number we wish to see if there is a replacement for\n @return reputationLogEntry ReputationLogEntry instance with the details of the log entry (if it exists)",
            "id": 1602,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReplacementReputationUpdateLogEntry",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1598,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1595,
                  "name": "_reputationMiningCycle",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "3120:30:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1594,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3120:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1597,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "3152:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1596,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3152:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3119:45:6"
            },
            "returnParameters": {
              "id": 1601,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1600,
                  "name": "reputationLogEntry",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "3190:44:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ReputationLogEntry_$1218_memory_ptr",
                    "typeString": "struct ColonyNetworkDataTypes.ReputationLogEntry"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 1599,
                    "name": "ReputationLogEntry",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1218,
                    "src": "3190:18:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ReputationLogEntry_$1218_storage_ptr",
                      "typeString": "struct ColonyNetworkDataTypes.ReputationLogEntry"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3189:46:6"
            },
            "scope": 1864,
            "src": "3072:164:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get whether any replacement log entries have been set for the supplied reputation mining cycle.\n @notice Used by the client to avoid doubling the number of RPC calls when syncing from scratch.\n @param _reputationMiningCycle The reputation mining cycle address we want to know if any entries have been replaced in.\n @return exists Boolean indicating whether there is a replacement log",
            "id": 1609,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReplacementReputationUpdateLogsExist",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1605,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1604,
                  "name": "_reputationMiningCycle",
                  "nodeType": "VariableDeclaration",
                  "scope": 1609,
                  "src": "3702:30:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1603,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3702:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3701:32:6"
            },
            "returnParameters": {
              "id": 1608,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1607,
                  "name": "exists",
                  "nodeType": "VariableDeclaration",
                  "scope": 1609,
                  "src": "3755:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1606,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3755:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3754:13:6"
            },
            "scope": 1864,
            "src": "3653:115:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the Meta Colony address.\n @return colonyAddress The Meta colony address, if no colony was found, returns 0x0",
            "id": 1614,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMetaColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1610,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3926:2:6"
            },
            "returnParameters": {
              "id": 1613,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1612,
                  "name": "colonyAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1614,
                  "src": "3950:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 1611,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3950:15:6",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3949:31:6"
            },
            "scope": 1864,
            "src": "3904:77:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of colonies in the network.\n @return count The colony count",
            "id": 1619,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColonyCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1615,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4102:2:6"
            },
            "returnParameters": {
              "id": 1618,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1617,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 1619,
                  "src": "4126:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1616,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4126:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4125:15:6"
            },
            "scope": 1864,
            "src": "4079:62:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Check if specific address is a colony created on colony network.\n @param _colony Address of the colony\n @return addressIsColony true if specified address is a colony, otherwise false",
            "id": 1626,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1622,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1621,
                  "name": "_colony",
                  "nodeType": "VariableDeclaration",
                  "scope": 1626,
                  "src": "4370:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1620,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4370:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4369:17:6"
            },
            "returnParameters": {
              "id": 1625,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1624,
                  "name": "addressIsColony",
                  "nodeType": "VariableDeclaration",
                  "scope": 1626,
                  "src": "4408:20:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1623,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4408:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4407:22:6"
            },
            "scope": 1864,
            "src": "4352:78:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Adds a new skill to the global or local skills tree, under skill `_parentSkillId`.\n Only the Meta Colony is allowed to add a global skill, called via `IColony.addGlobalSkill`.\n Any colony is allowed to add a local skill and which is associated with a new domain via `IColony.addDomain`.\n @dev Errors if the parent skill does not exist or if this is called by an unauthorised sender.\n @param _parentSkillId Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent.\n @return skillId Id of the added skill",
            "id": 1633,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1629,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1628,
                  "name": "_parentSkillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1633,
                  "src": "5039:22:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1627,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5039:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5038:24:6"
            },
            "returnParameters": {
              "id": 1632,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1631,
                  "name": "skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1633,
                  "src": "5079:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1630,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5079:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5078:17:6"
            },
            "scope": 1864,
            "src": "5021:75:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `nParents` and `nChildren` of skill with id `_skillId`.\n @param _skillId Id of the skill\n @return skill The Skill struct",
            "id": 1640,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1636,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1635,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1640,
                  "src": "5271:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1634,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5271:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5270:18:6"
            },
            "returnParameters": {
              "id": 1639,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1638,
                  "name": "skill",
                  "nodeType": "VariableDeclaration",
                  "scope": 1640,
                  "src": "5310:18:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Skill_$1200_memory_ptr",
                    "typeString": "struct ColonyNetworkDataTypes.Skill"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 1637,
                    "name": "Skill",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1200,
                    "src": "5310:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Skill_$1200_storage_ptr",
                      "typeString": "struct ColonyNetworkDataTypes.Skill"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5309:20:6"
            },
            "scope": 1864,
            "src": "5253:77:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Mark a global skill as deprecated which stops new tasks and payments from using it.\n @param _skillId Id of the skill",
            "id": 1645,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deprecateSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1643,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1642,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1645,
                  "src": "5494:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1641,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5494:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5493:18:6"
            },
            "returnParameters": {
              "id": 1644,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5518:0:6"
            },
            "scope": 1864,
            "src": "5470:49:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Adds a reputation update entry to log.\n @dev Errors if it is called by anyone but a colony or if skill with id `_skillId` does not exist or.\n @param _user The address of the user for the reputation update\n @param _amount The amount of reputation change for the update, this can be a negative as well as a positive value\n @param _skillId The skill for the reputation update",
            "id": 1654,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "appendReputationUpdateLog",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1652,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1647,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 1654,
                  "src": "5965:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1646,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5965:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1649,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1654,
                  "src": "5980:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 1648,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5980:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1651,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1654,
                  "src": "5996:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1650,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5996:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5964:49:6"
            },
            "returnParameters": {
              "id": 1653,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6020:0:6"
            },
            "scope": 1864,
            "src": "5930:91:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of skills in the network including both global and local skills.\n @return count The skill count",
            "id": 1659,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSkillCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1655,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6177:2:6"
            },
            "returnParameters": {
              "id": 1658,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1657,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 1659,
                  "src": "6201:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1656,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6201:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6200:15:6"
            },
            "scope": 1864,
            "src": "6155:61:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `skillId` of the reputation mining skill. Only set once the metacolony is set up.\n @return skillId The `skillId` of the reputation mining skill.",
            "id": 1664,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationMiningSkillId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1660,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6427:2:6"
            },
            "returnParameters": {
              "id": 1663,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1662,
                  "name": "skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1664,
                  "src": "6451:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1661,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6451:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6450:17:6"
            },
            "scope": 1864,
            "src": "6392:76:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the token locking address.\n This is only set once, and can't be changed afterwards.\n @param _tokenLockingAddress Address of the locking contract",
            "id": 1669,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTokenLocking",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1667,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1666,
                  "name": "_tokenLockingAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1669,
                  "src": "6671:28:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1665,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6671:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6670:30:6"
            },
            "returnParameters": {
              "id": 1668,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6707:0:6"
            },
            "scope": 1864,
            "src": "6646:62:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get token locking contract address.\n @return lockingAddress Token locking contract address",
            "id": 1674,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenLocking",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1670,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6846:2:6"
            },
            "returnParameters": {
              "id": 1673,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1672,
                  "name": "lockingAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1674,
                  "src": "6870:22:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1671,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6870:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6869:24:6"
            },
            "scope": 1864,
            "src": "6822:72:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Create the Meta Colony, same as a normal colony plus the root skill.\n @param _tokenAddress Address of the CLNY token",
            "id": 1679,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createMetaColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1677,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1676,
                  "name": "_tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1679,
                  "src": "7060:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1675,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7060:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7059:23:6"
            },
            "returnParameters": {
              "id": 1678,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7089:0:6"
            },
            "scope": 1864,
            "src": "7034:56:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Creates a new colony in the network.\n Note that the token ownership (if there is one) has to be transferred to the newly created colony.\n @param _tokenAddress Address of an ERC20 token to serve as the colony token.\n Additionally token can optionally support `mint` as defined in `ERC20Extended`.\n Support for `mint` is mandatory only for the Meta Colony Token.\n @return colonyAddress Address of the newly created colony",
            "id": 1686,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1682,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1681,
                  "name": "_tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1686,
                  "src": "7575:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1680,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7575:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7574:23:6"
            },
            "returnParameters": {
              "id": 1685,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1684,
                  "name": "colonyAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1686,
                  "src": "7614:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1683,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7614:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7613:23:6"
            },
            "scope": 1864,
            "src": "7553:84:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Adds a new Colony contract version and the address of associated `_resolver` contract. Secured function to authorised members.\n Allowed to be called by the Meta Colony only.\n @param _version The new Colony contract version\n @param _resolver Address of the `Resolver` contract which will be used with the underlying `EtherRouter` contract",
            "id": 1693,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addColonyVersion",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1691,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1688,
                  "name": "_version",
                  "nodeType": "VariableDeclaration",
                  "scope": 1693,
                  "src": "8034:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1687,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8034:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1690,
                  "name": "_resolver",
                  "nodeType": "VariableDeclaration",
                  "scope": 1693,
                  "src": "8052:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1689,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8052:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8033:37:6"
            },
            "returnParameters": {
              "id": 1692,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8077:0:6"
            },
            "scope": 1864,
            "src": "8008:70:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Initialises the colony network by setting the first Colony version resolver to `_resolver` address.\n @dev Only allowed to be run once, by the Network owner before any Colony versions are added.\n @param _resolver Address of the resolver for Colony contract\n @param _version Version of the Colony contract the resolver represents",
            "id": 1700,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialise",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1698,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1695,
                  "name": "_resolver",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "8459:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1694,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8459:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1697,
                  "name": "_version",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "8478:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1696,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8478:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8458:37:6"
            },
            "returnParameters": {
              "id": 1699,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8502:0:6"
            },
            "scope": 1864,
            "src": "8439:64:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get a colony address by its Id in the network.\n @param _id Id of the colony to get\n @return colonyAddress The colony address, if no colony was found, returns 0x0",
            "id": 1707,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1703,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1702,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 1707,
                  "src": "8712:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1701,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8712:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8711:13:6"
            },
            "returnParameters": {
              "id": 1706,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1705,
                  "name": "colonyAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1707,
                  "src": "8746:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1704,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8746:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8745:23:6"
            },
            "scope": 1864,
            "src": "8693:76:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns the latest Colony contract version. This is the version used to create all new colonies.\n @return version The current / latest Colony contract version",
            "id": 1712,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getCurrentColonyVersion",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1708,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8983:2:6"
            },
            "returnParameters": {
              "id": 1711,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1710,
                  "name": "version",
                  "nodeType": "VariableDeclaration",
                  "scope": 1712,
                  "src": "9007:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1709,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9007:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9006:17:6"
            },
            "scope": 1864,
            "src": "8951:73:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the id of the parent skill at index `_parentSkillIndex` for skill with Id `_skillId`.\n @param _skillId Id of the skill\n @param _parentSkillIndex Index of the `skill.parents` array to get\n Note that not all parent skill ids are stored here. See `Skill.parents` member for definition on which parents are stored\n @return skillId Skill Id of the requested parent skill",
            "id": 1721,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getParentSkillId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1717,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1714,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1721,
                  "src": "9458:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1713,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9458:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1716,
                  "name": "_parentSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 1721,
                  "src": "9476:25:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1715,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9476:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9457:45:6"
            },
            "returnParameters": {
              "id": 1720,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1719,
                  "name": "skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1721,
                  "src": "9524:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1718,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9524:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9523:17:6"
            },
            "scope": 1864,
            "src": "9432:109:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the id of the child skill at index `_childSkillIndex` for skill with Id `_skillId`.\n @param _skillId Id of the skill\n @param _childSkillIndex Index of the `skill.children` array to get\n @return skillId Skill Id of the requested child skill",
            "id": 1730,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getChildSkillId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1726,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1723,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1730,
                  "src": "9843:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1722,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9843:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1725,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 1730,
                  "src": "9861:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1724,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9861:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9842:44:6"
            },
            "returnParameters": {
              "id": 1729,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1728,
                  "name": "skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1730,
                  "src": "9908:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1727,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9908:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9907:17:6"
            },
            "scope": 1864,
            "src": "9818:107:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the address of either the active or inactive reputation mining cycle, based on `active`. The active reputation mining cycle\n is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to.\n @param _active Whether the user wants the active or inactive reputation mining cycle\n @return repMiningCycleAddress address of active or inactive ReputationMiningCycle",
            "id": 1737,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationMiningCycle",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1733,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1732,
                  "name": "_active",
                  "nodeType": "VariableDeclaration",
                  "scope": 1737,
                  "src": "10434:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1731,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10434:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10433:14:6"
            },
            "returnParameters": {
              "id": 1736,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1735,
                  "name": "repMiningCycleAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1737,
                  "src": "10469:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1734,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10469:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10468:31:6"
            },
            "scope": 1864,
            "src": "10400:100:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Calculate raw miner weight in WADs.\n @param _timeStaked Amount of time (in seconds) that the miner has staked their CLNY\n @param _submissonIndex Index of reputation hash submission (between 0 and 11)\n @return minerWeight The weight of miner reward",
            "id": 1746,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calculateMinerWeight",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1742,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1739,
                  "name": "_timeStaked",
                  "nodeType": "VariableDeclaration",
                  "scope": 1746,
                  "src": "10811:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1738,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10811:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1741,
                  "name": "_submissonIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 1746,
                  "src": "10832:23:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1740,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10832:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10810:46:6"
            },
            "returnParameters": {
              "id": 1745,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1744,
                  "name": "minerWeight",
                  "nodeType": "VariableDeclaration",
                  "scope": 1746,
                  "src": "10878:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1743,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10878:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10877:21:6"
            },
            "scope": 1864,
            "src": "10781:118:6",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `Resolver` address for Colony contract version `_version`.\n @param _version The Colony contract version\n @return resolverAddress Address of the `Resolver` contract",
            "id": 1753,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColonyVersionResolver",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1749,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1748,
                  "name": "_version",
                  "nodeType": "VariableDeclaration",
                  "scope": 1753,
                  "src": "11133:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1747,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11133:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11132:18:6"
            },
            "returnParameters": {
              "id": 1752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1751,
                  "name": "resolverAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1753,
                  "src": "11172:23:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1750,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11172:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11171:25:6"
            },
            "scope": 1864,
            "src": "11099:98:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract.\n @param newHash The reputation root hash\n @param newNNodes The updated nodes count value\n @param stakers Array of users who submitted or backed the hash, being accepted here as the new reputation root hash\n @param reward Amount of CLNY to be distributed as reward to miners",
            "id": 1765,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setReputationRootHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1763,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1755,
                  "name": "newHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 1765,
                  "src": "11660:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1754,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "11660:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1757,
                  "name": "newNNodes",
                  "nodeType": "VariableDeclaration",
                  "scope": 1765,
                  "src": "11677:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1756,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11677:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1760,
                  "name": "stakers",
                  "nodeType": "VariableDeclaration",
                  "scope": 1765,
                  "src": "11696:24:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1758,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "11696:7:6",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1759,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "11696:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1762,
                  "name": "reward",
                  "nodeType": "VariableDeclaration",
                  "scope": 1765,
                  "src": "11722:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1761,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11722:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11659:78:6"
            },
            "returnParameters": {
              "id": 1764,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11744:0:6"
            },
            "scope": 1864,
            "src": "11629:116:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Starts a new Reputation Mining cycle. Explicitly called only the first time,\n subsequently called from within `setReputationRootHash`.",
            "id": 1768,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "startNextCycle",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1766,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11926:2:6"
            },
            "returnParameters": {
              "id": 1767,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11935:0:6"
            },
            "scope": 1864,
            "src": "11903:33:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Creates initial inactive reputation mining cycle.",
            "id": 1771,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialiseReputationMining",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1769,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12039:2:6"
            },
            "returnParameters": {
              "id": 1770,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12048:0:6"
            },
            "scope": 1864,
            "src": "12004:45:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the root hash of the current reputation state tree.\n @return rootHash The current Reputation Root Hash",
            "id": 1776,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationRootHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1772,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12209:2:6"
            },
            "returnParameters": {
              "id": 1775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1774,
                  "name": "rootHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 1776,
                  "src": "12233:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1773,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12233:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12232:18:6"
            },
            "scope": 1864,
            "src": "12179:72:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of nodes in the current reputation state tree.\n @dev I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.\n @return nNodes uint256 The number of nodes in the state tree",
            "id": 1781,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationRootHashNNodes",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12595:2:6"
            },
            "returnParameters": {
              "id": 1780,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1779,
                  "name": "nNodes",
                  "nodeType": "VariableDeclaration",
                  "scope": 1781,
                  "src": "12619:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1778,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12619:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12618:16:6"
            },
            "scope": 1864,
            "src": "12559:76:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Create and start a new `DutchAuction` for the entire amount of `_token` owned by the Colony Network.\n @param _token Address of the token held by the network to be auctioned",
            "id": 1786,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "startTokenAuction",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1784,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1783,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 1786,
                  "src": "12858:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1782,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12858:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12857:16:6"
            },
            "returnParameters": {
              "id": 1785,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12880:0:6"
            },
            "scope": 1864,
            "src": "12831:50:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Setup registrar with ENS and root node.\n @param _ens Address of ENS registrar\n @param _rootNode Namehash of the root node for the domain",
            "id": 1793,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setupRegistrar",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1791,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1788,
                  "name": "_ens",
                  "nodeType": "VariableDeclaration",
                  "scope": 1793,
                  "src": "13070:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1787,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13070:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1790,
                  "name": "_rootNode",
                  "nodeType": "VariableDeclaration",
                  "scope": 1793,
                  "src": "13084:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1789,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "13084:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13069:33:6"
            },
            "returnParameters": {
              "id": 1792,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13109:0:6"
            },
            "scope": 1864,
            "src": "13046:64:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Register a \"user.joincolony.eth\" label.\n @param username The label to register\n @param orbitdb The path of the orbitDB database associated with the user profile",
            "id": 1800,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerUserLabel",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1798,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1795,
                  "name": "username",
                  "nodeType": "VariableDeclaration",
                  "scope": 1800,
                  "src": "13326:22:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1794,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13326:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1797,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 1800,
                  "src": "13350:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1796,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13350:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13325:47:6"
            },
            "returnParameters": {
              "id": 1799,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13379:0:6"
            },
            "scope": 1864,
            "src": "13299:81:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Register a \"colony.joincolony.eth\" label. Can only be called by a Colony.\n @param colonyName The label to register.\n @param orbitdb The path of the orbitDB database associated with the colony name",
            "id": 1807,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerColonyLabel",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1805,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1802,
                  "name": "colonyName",
                  "nodeType": "VariableDeclaration",
                  "scope": 1807,
                  "src": "13634:24:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1801,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13634:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1804,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 1807,
                  "src": "13660:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1803,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13660:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13633:49:6"
            },
            "returnParameters": {
              "id": 1806,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13689:0:6"
            },
            "scope": 1864,
            "src": "13605:85:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n @param orbitdb The path of the orbitDB database to be associated with the colony",
            "id": 1812,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateColonyOrbitDB",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1810,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1809,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 1812,
                  "src": "13918:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1808,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13918:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13917:23:6"
            },
            "returnParameters": {
              "id": 1811,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13947:0:6"
            },
            "scope": 1864,
            "src": "13889:59:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Update a user's orbitdb address. Can only be called by a user with a registered subdomain\n @param orbitdb The path of the orbitDB database to be associated with the user",
            "id": 1817,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateUserOrbitDB",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1815,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1814,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 1817,
                  "src": "14168:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1813,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "14168:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14167:23:6"
            },
            "returnParameters": {
              "id": 1816,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14197:0:6"
            },
            "scope": 1864,
            "src": "14141:57:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Retrieve the orbitdb address corresponding to a registered account.\n @param node The Namehash of the account being queried.\n @return orbitDB A string containing the address of the orbit database",
            "id": 1824,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getProfileDBAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1820,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1819,
                  "name": "node",
                  "nodeType": "VariableDeclaration",
                  "scope": 1824,
                  "src": "14450:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1818,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "14450:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14449:14:6"
            },
            "returnParameters": {
              "id": 1823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1822,
                  "name": "orbitDB",
                  "nodeType": "VariableDeclaration",
                  "scope": 1824,
                  "src": "14485:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1821,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "14485:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14484:23:6"
            },
            "scope": 1864,
            "src": "14421:87:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Reverse lookup a username from an address.\n @param addr The address we wish to find the corresponding ENS domain for (if any)\n @return domain A string containing the colony-based ENS name corresponding to addr",
            "id": 1831,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lookupRegisteredENSDomain",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1827,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1826,
                  "name": "addr",
                  "nodeType": "VariableDeclaration",
                  "scope": 1831,
                  "src": "14781:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1825,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14781:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14780:14:6"
            },
            "returnParameters": {
              "id": 1830,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1829,
                  "name": "domain",
                  "nodeType": "VariableDeclaration",
                  "scope": 1831,
                  "src": "14815:20:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1828,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "14815:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14814:22:6"
            },
            "scope": 1864,
            "src": "14746:91:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns the address the supplied node resolves do, if we are the resolver.\n @param node The namehash of the ENS address being requested\n @return address The address the supplied node resolves to",
            "id": 1838,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addr",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1834,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1833,
                  "name": "node",
                  "nodeType": "VariableDeclaration",
                  "scope": 1838,
                  "src": "15074:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1832,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "15074:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15073:14:6"
            },
            "returnParameters": {
              "id": 1837,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1836,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1838,
                  "src": "15109:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1835,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15109:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15108:9:6"
            },
            "scope": 1864,
            "src": "15060:58:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns the address of the ENSRegistrar for the Network.\n @return address The address the ENSRegistrar resolves to",
            "id": 1843,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getENSRegistrar",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1839,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15280:2:6"
            },
            "returnParameters": {
              "id": 1842,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1841,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1843,
                  "src": "15304:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1840,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15304:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15303:9:6"
            },
            "scope": 1864,
            "src": "15256:57:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the resolver to be used by new instances of ReputationMiningCycle.\n @param miningResolverAddress The address of the Resolver contract with the functions correctly wired.",
            "id": 1848,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMiningResolver",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1846,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1845,
                  "name": "miningResolverAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1848,
                  "src": "15537:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1844,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15537:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15536:31:6"
            },
            "returnParameters": {
              "id": 1847,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15574:0:6"
            },
            "scope": 1864,
            "src": "15510:65:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the resolver to be used by new instances of ReputationMiningCycle.\n @return miningResolverAddress The address of the mining cycle resolver currently used by new instances",
            "id": 1853,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMiningResolver",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1849,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15799:2:6"
            },
            "returnParameters": {
              "id": 1852,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1851,
                  "name": "miningResolverAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1853,
                  "src": "15823:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1850,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15823:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15822:31:6"
            },
            "scope": 1864,
            "src": "15773:81:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100.\n @return _feeInverse The inverse of the network fee",
            "id": 1858,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFeeInverse",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1854,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16038:2:6"
            },
            "returnParameters": {
              "id": 1857,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1856,
                  "name": "_feeInverse",
                  "nodeType": "VariableDeclaration",
                  "scope": 1858,
                  "src": "16062:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1855,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16062:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16061:21:6"
            },
            "scope": 1864,
            "src": "16016:67:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as `_feeInverse`.\n @param _feeInverse The inverse of the network fee to set",
            "id": 1863,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setFeeInverse",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1860,
                  "name": "_feeInverse",
                  "nodeType": "VariableDeclaration",
                  "scope": 1863,
                  "src": "16282:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1859,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16282:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16281:21:6"
            },
            "returnParameters": {
              "id": 1862,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16309:0:6"
            },
            "scope": 1864,
            "src": "16259:51:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1865,
        "src": "1004:15308:6"
      }
    ],
    "src": "700:15613:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Linux.g++"
  },
  "networks": {},
  "schemaVersion": "3.0.13",
  "updatedAt": "2019-08-24T12:51:17.613Z",
  "devdoc": {
    "methods": {
      "addColonyVersion(uint256,address)": {
        "params": {
          "_resolver": "Address of the `Resolver` contract which will be used with the underlying `EtherRouter` contract",
          "_version": "The new Colony contract version"
        }
      },
      "addSkill(uint256)": {
        "details": "Errors if the parent skill does not exist or if this is called by an unauthorised sender.",
        "params": {
          "_parentSkillId": "Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent."
        },
        "return": "skillId Id of the added skill"
      },
      "addr(bytes32)": {
        "params": {
          "node": "The namehash of the ENS address being requested"
        },
        "return": "address The address the supplied node resolves to"
      },
      "appendReputationUpdateLog(address,int256,uint256)": {
        "details": "Errors if it is called by anyone but a colony or if skill with id `_skillId` does not exist or.",
        "params": {
          "_amount": "The amount of reputation change for the update, this can be a negative as well as a positive value",
          "_skillId": "The skill for the reputation update",
          "_user": "The address of the user for the reputation update"
        }
      },
      "calculateMinerWeight(uint256,uint256)": {
        "params": {
          "_submissonIndex": "Index of reputation hash submission (between 0 and 11)",
          "_timeStaked": "Amount of time (in seconds) that the miner has staked their CLNY"
        },
        "return": "minerWeight The weight of miner reward"
      },
      "checkNotAdditionalProtectedVariable(uint256)": {
        "details": "No return value, but should throw if protected.This is public, but is only expected to be called from ContractRecovery; no need toexpose this to any users.",
        "params": {
          "_slot": "The storage slot number to check."
        }
      },
      "createColony(address)": {
        "params": {
          "_tokenAddress": "Address of an ERC20 token to serve as the colony token. Additionally token can optionally support `mint` as defined in `ERC20Extended`. Support for `mint` is mandatory only for the Meta Colony Token."
        },
        "return": "colonyAddress Address of the newly created colony"
      },
      "createMetaColony(address)": {
        "params": {
          "_tokenAddress": "Address of the CLNY token"
        }
      },
      "deprecateSkill(uint256)": {
        "params": {
          "_skillId": "Id of the skill"
        }
      },
      "getChildSkillId(uint256,uint256)": {
        "params": {
          "_childSkillIndex": "Index of the `skill.children` array to get",
          "_skillId": "Id of the skill"
        },
        "return": "skillId Skill Id of the requested child skill"
      },
      "getColony(uint256)": {
        "params": {
          "_id": "Id of the colony to get"
        },
        "return": "colonyAddress The colony address, if no colony was found, returns 0x0"
      },
      "getColonyCount()": {
        "return": "count The colony count"
      },
      "getColonyVersionResolver(uint256)": {
        "params": {
          "_version": "The Colony contract version"
        },
        "return": "resolverAddress Address of the `Resolver` contract"
      },
      "getCurrentColonyVersion()": {
        "return": "version The current / latest Colony contract version"
      },
      "getENSRegistrar()": {
        "return": "address The address the ENSRegistrar resolves to"
      },
      "getFeeInverse()": {
        "return": "_feeInverse The inverse of the network fee"
      },
      "getMetaColony()": {
        "return": "colonyAddress The Meta colony address, if no colony was found, returns 0x0"
      },
      "getMiningResolver()": {
        "return": "miningResolverAddress The address of the mining cycle resolver currently used by new instances"
      },
      "getParentSkillId(uint256,uint256)": {
        "params": {
          "_parentSkillIndex": "Index of the `skill.parents` array to get Note that not all parent skill ids are stored here. See `Skill.parents` member for definition on which parents are stored",
          "_skillId": "Id of the skill"
        },
        "return": "skillId Skill Id of the requested parent skill"
      },
      "getProfileDBAddress(bytes32)": {
        "params": {
          "node": "The Namehash of the account being queried."
        },
        "return": "orbitDB A string containing the address of the orbit database"
      },
      "getReplacementReputationUpdateLogEntry(address,uint256)": {
        "params": {
          "_id": "The log entry number we wish to see if there is a replacement for",
          "_reputationMiningCycle": "The address of the reputation mining cycle we are asking about"
        },
        "return": "reputationLogEntry ReputationLogEntry instance with the details of the log entry (if it exists)"
      },
      "getReplacementReputationUpdateLogsExist(address)": {
        "params": {
          "_reputationMiningCycle": "The reputation mining cycle address we want to know if any entries have been replaced in."
        },
        "return": "exists Boolean indicating whether there is a replacement log"
      },
      "getReputationMiningCycle(bool)": {
        "params": {
          "_active": "Whether the user wants the active or inactive reputation mining cycle"
        },
        "return": "repMiningCycleAddress address of active or inactive ReputationMiningCycle"
      },
      "getReputationMiningSkillId()": {
        "return": "skillId The `skillId` of the reputation mining skill."
      },
      "getReputationRootHash()": {
        "return": "rootHash The current Reputation Root Hash"
      },
      "getReputationRootHashNNodes()": {
        "details": "I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.",
        "return": "nNodes uint256 The number of nodes in the state tree"
      },
      "getSkill(uint256)": {
        "params": {
          "_skillId": "Id of the skill"
        },
        "return": "skill The Skill struct"
      },
      "getSkillCount()": {
        "return": "count The skill count"
      },
      "getTokenLocking()": {
        "return": "lockingAddress Token locking contract address"
      },
      "initialise(address,uint256)": {
        "details": "Only allowed to be run once, by the Network owner before any Colony versions are added.",
        "params": {
          "_resolver": "Address of the resolver for Colony contract",
          "_version": "Version of the Colony contract the resolver represents"
        }
      },
      "isColony(address)": {
        "params": {
          "_colony": "Address of the colony"
        },
        "return": "addressIsColony true if specified address is a colony, otherwise false"
      },
      "isInRecoveryMode()": {
        "return": "inRecoveryMode Return true if recovery mode is active, false otherwise"
      },
      "lookupRegisteredENSDomain(address)": {
        "params": {
          "addr": "The address we wish to find the corresponding ENS domain for (if any)"
        },
        "return": "domain A string containing the colony-based ENS name corresponding to addr"
      },
      "numRecoveryRoles()": {
        "return": "numRoles Number of users with the recovery role."
      },
      "registerColonyLabel(string,string)": {
        "params": {
          "colonyName": "The label to register.",
          "orbitdb": "The path of the orbitDB database associated with the colony name"
        }
      },
      "registerUserLabel(string,string)": {
        "params": {
          "orbitdb": "The path of the orbitDB database associated with the user profile",
          "username": "The label to register"
        }
      },
      "removeRecoveryRole(address)": {
        "params": {
          "_user": "User we want to remove recovery role from"
        }
      },
      "setFeeInverse(uint256)": {
        "params": {
          "_feeInverse": "The inverse of the network fee to set"
        }
      },
      "setMiningResolver(address)": {
        "params": {
          "miningResolverAddress": "The address of the Resolver contract with the functions correctly wired."
        }
      },
      "setRecoveryRole(address)": {
        "params": {
          "_user": "User we want to give a recovery role to"
        }
      },
      "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)": {
        "details": "Note that strictly, `_nUpdates` and `_nPreviousUpdates` don't need to be set - they're only used during dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing the client, we have decided to include them for now.",
        "params": {
          "_amount": "The amount of reputation being earned / lost",
          "_colony": "The address of the colony being updated",
          "_id": "The number of the log entry in the reputation mining cycle in question.",
          "_nPreviousUpdates": "The number of updates in the log before this entry",
          "_nUpdates": "The number of updates the log entry corresponds to",
          "_reputationMiningCycle": "The address of the reputation mining cycle that the log was in.",
          "_skillId": "The id of the origin skill for the reputation update",
          "_user": "The address of the user earning / losing the reputation"
        }
      },
      "setReputationRootHash(bytes32,uint256,address[],uint256)": {
        "params": {
          "newHash": "The reputation root hash",
          "newNNodes": "The updated nodes count value",
          "reward": "Amount of CLNY to be distributed as reward to miners",
          "stakers": "Array of users who submitted or backed the hash, being accepted here as the new reputation root hash"
        }
      },
      "setStorageSlotRecovery(uint256,bytes32)": {
        "details": "certain critical variables are protected from editing in this function",
        "params": {
          "_slot": "Uint address of storage slot to be updated",
          "_value": "word of data to be set"
        }
      },
      "setTokenLocking(address)": {
        "params": {
          "_tokenLockingAddress": "Address of the locking contract"
        }
      },
      "setupRegistrar(address,bytes32)": {
        "params": {
          "_ens": "Address of ENS registrar",
          "_rootNode": "Namehash of the root node for the domain"
        }
      },
      "startTokenAuction(address)": {
        "params": {
          "_token": "Address of the token held by the network to be auctioned"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "return": "`true` if the contract implements `interfaceID`"
      },
      "updateColonyOrbitDB(string)": {
        "params": {
          "orbitdb": "The path of the orbitDB database to be associated with the colony"
        }
      },
      "updateUserOrbitDB(string)": {
        "params": {
          "orbitdb": "The path of the orbitDB database to be associated with the user"
        }
      }
    },
    "title": "Colony Network interface"
  },
  "userdoc": {
    "methods": {
      "addColonyVersion(uint256,address)": {
        "notice": "Adds a new Colony contract version and the address of associated `_resolver` contract. Secured function to authorised members. Allowed to be called by the Meta Colony only."
      },
      "addSkill(uint256)": {
        "notice": "Adds a new skill to the global or local skills tree, under skill `_parentSkillId`. Only the Meta Colony is allowed to add a global skill, called via `IColony.addGlobalSkill`. Any colony is allowed to add a local skill and which is associated with a new domain via `IColony.addDomain`."
      },
      "addr(bytes32)": {
        "notice": "Returns the address the supplied node resolves do, if we are the resolver."
      },
      "appendReputationUpdateLog(address,int256,uint256)": {
        "notice": "Adds a reputation update entry to log."
      },
      "approveExitRecovery()": {
        "notice": "Indicate approval to exit recovery mode. Can only be called by user with recovery role."
      },
      "calculateMinerWeight(uint256,uint256)": {
        "notice": "Calculate raw miner weight in WADs."
      },
      "checkNotAdditionalProtectedVariable(uint256)": {
        "notice": "Check whether the supplied slot is a protected variable specific to this contract"
      },
      "createColony(address)": {
        "notice": "Creates a new colony in the network. Note that the token ownership (if there is one) has to be transferred to the newly created colony."
      },
      "createMetaColony(address)": {
        "notice": "Create the Meta Colony, same as a normal colony plus the root skill."
      },
      "deprecateSkill(uint256)": {
        "notice": "Mark a global skill as deprecated which stops new tasks and payments from using it."
      },
      "enterRecoveryMode()": {
        "notice": "Put colony network mining into recovery mode. Can only be called by user with recovery role."
      },
      "exitRecoveryMode()": {
        "notice": "Exit recovery mode, can be called by anyone if enough whitelist approvals are given."
      },
      "getChildSkillId(uint256,uint256)": {
        "notice": "Get the id of the child skill at index `_childSkillIndex` for skill with Id `_skillId`."
      },
      "getColony(uint256)": {
        "notice": "Get a colony address by its Id in the network."
      },
      "getColonyCount()": {
        "notice": "Get the number of colonies in the network."
      },
      "getColonyVersionResolver(uint256)": {
        "notice": "Get the `Resolver` address for Colony contract version `_version`."
      },
      "getCurrentColonyVersion()": {
        "notice": "Returns the latest Colony contract version. This is the version used to create all new colonies."
      },
      "getENSRegistrar()": {
        "notice": "Returns the address of the ENSRegistrar for the Network."
      },
      "getFeeInverse()": {
        "notice": "Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100."
      },
      "getMetaColony()": {
        "notice": "Get the Meta Colony address."
      },
      "getMiningResolver()": {
        "notice": "Get the resolver to be used by new instances of ReputationMiningCycle."
      },
      "getParentSkillId(uint256,uint256)": {
        "notice": "Get the id of the parent skill at index `_parentSkillIndex` for skill with Id `_skillId`."
      },
      "getProfileDBAddress(bytes32)": {
        "notice": "Retrieve the orbitdb address corresponding to a registered account."
      },
      "getReplacementReputationUpdateLogEntry(address,uint256)": {
        "notice": "Get a replacement log entry (if set) for the log entry `_id` in the mining cycle that was at the address `_reputationMiningCycle`."
      },
      "getReplacementReputationUpdateLogsExist(address)": {
        "notice": "Get whether any replacement log entries have been set for the supplied reputation mining cycle.Used by the client to avoid doubling the number of RPC calls when syncing from scratch."
      },
      "getReputationMiningCycle(bool)": {
        "notice": "Get the address of either the active or inactive reputation mining cycle, based on `active`. The active reputation mining cycle is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to."
      },
      "getReputationMiningSkillId()": {
        "notice": "Get the `skillId` of the reputation mining skill. Only set once the metacolony is set up."
      },
      "getReputationRootHash()": {
        "notice": "Get the root hash of the current reputation state tree."
      },
      "getReputationRootHashNNodes()": {
        "notice": "Get the number of nodes in the current reputation state tree."
      },
      "getSkill(uint256)": {
        "notice": "Get the `nParents` and `nChildren` of skill with id `_skillId`."
      },
      "getSkillCount()": {
        "notice": "Get the number of skills in the network including both global and local skills."
      },
      "getTokenLocking()": {
        "notice": "Get token locking contract address."
      },
      "initialise(address,uint256)": {
        "notice": "Initialises the colony network by setting the first Colony version resolver to `_resolver` address."
      },
      "initialiseReputationMining()": {
        "notice": "Creates initial inactive reputation mining cycle."
      },
      "isColony(address)": {
        "notice": "Check if specific address is a colony created on colony network."
      },
      "isInRecoveryMode()": {
        "notice": "Is colony network in recovery mode."
      },
      "lookupRegisteredENSDomain(address)": {
        "notice": "Reverse lookup a username from an address."
      },
      "numRecoveryRoles()": {
        "notice": "Return number of recovery roles."
      },
      "registerColonyLabel(string,string)": {
        "notice": "Register a \"colony.joincolony.eth\" label. Can only be called by a Colony."
      },
      "registerUserLabel(string,string)": {
        "notice": "Register a \"user.joincolony.eth\" label."
      },
      "removeRecoveryRole(address)": {
        "notice": "Remove colony recovery role. Can only be called by root role."
      },
      "setFeeInverse(uint256)": {
        "notice": "Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as `_feeInverse`."
      },
      "setMiningResolver(address)": {
        "notice": "Set the resolver to be used by new instances of ReputationMiningCycle."
      },
      "setRecoveryRole(address)": {
        "notice": "Set new colony recovery role. Can be called by root."
      },
      "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)": {
        "notice": "Set a replacement log entry if we're in recovery mode."
      },
      "setReputationRootHash(bytes32,uint256,address[],uint256)": {
        "notice": "Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract."
      },
      "setStorageSlotRecovery(uint256,bytes32)": {
        "notice": "Update value of arbitrary storage variable. Can only be called by user with recovery role."
      },
      "setTokenLocking(address)": {
        "notice": "Sets the token locking address. This is only set once, and can't be changed afterwards."
      },
      "setupRegistrar(address,bytes32)": {
        "notice": "Setup registrar with ENS and root node."
      },
      "startNextCycle()": {
        "notice": "Starts a new Reputation Mining cycle. Explicitly called only the first time, subsequently called from within `setReputationRootHash`."
      },
      "startTokenAuction(address)": {
        "notice": "Create and start a new `DutchAuction` for the entire amount of `_token` owned by the Colony Network."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "updateColonyOrbitDB(string)": {
        "notice": "Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain"
      },
      "updateUserOrbitDB(string)": {
        "notice": "Update a user's orbitdb address. Can only be called by a user with a registered subdomain"
      }
    },
    "notice": "All publicly available functions are available here and registered to work with EtherRouter Network contract"
  }
}